{"version":3,"file":"login-DfKBiyJ9.js","sources":["../../../node_modules/@simplewebauthn/browser/esm/helpers/browserSupportsWebAuthnAutofill.js","../../../node_modules/@simplewebauthn/browser/esm/helpers/identifyAuthenticationError.js","../../../node_modules/@simplewebauthn/browser/esm/methods/startAuthentication.js","../../../app/routes/_auth+/login.tsx"],"sourcesContent":["import { browserSupportsWebAuthn } from './browserSupportsWebAuthn.js';\n/**\n * Determine if the browser supports conditional UI, so that WebAuthn credentials can\n * be shown to the user in the browser's typical password autofill popup.\n */\nexport function browserSupportsWebAuthnAutofill() {\n    if (!browserSupportsWebAuthn()) {\n        return _browserSupportsWebAuthnAutofillInternals.stubThis(new Promise((resolve) => resolve(false)));\n    }\n    /**\n     * I don't like the `as unknown` here but there's a `declare var PublicKeyCredential` in\n     * TS' DOM lib that's making it difficult for me to just go `as PublicKeyCredentialFuture` as I\n     * want. I think I'm fine with this for now since it's _supposed_ to be temporary, until TS types\n     * have a chance to catch up.\n     */\n    const globalPublicKeyCredential = globalThis\n        .PublicKeyCredential;\n    if (globalPublicKeyCredential?.isConditionalMediationAvailable === undefined) {\n        return _browserSupportsWebAuthnAutofillInternals.stubThis(new Promise((resolve) => resolve(false)));\n    }\n    return _browserSupportsWebAuthnAutofillInternals.stubThis(globalPublicKeyCredential.isConditionalMediationAvailable());\n}\n// Make it possible to stub the return value during testing\nexport const _browserSupportsWebAuthnAutofillInternals = {\n    stubThis: (value) => value,\n};\n","import { isValidDomain } from './isValidDomain.js';\nimport { WebAuthnError } from './webAuthnError.js';\n/**\n * Attempt to intuit _why_ an error was raised after calling `navigator.credentials.get()`\n */\nexport function identifyAuthenticationError({ error, options, }) {\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal instanceof AbortSignal) {\n            // https://www.w3.org/TR/webauthn-2/#sctn-createCredential (Step 16)\n            return new WebAuthnError({\n                message: 'Authentication ceremony was sent an abort signal',\n                code: 'ERROR_CEREMONY_ABORTED',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'NotAllowedError') {\n        /**\n         * Pass the error directly through. Platforms are overloading this error beyond what the spec\n         * defines and we don't want to overwrite potentially useful error messages.\n         */\n        return new WebAuthnError({\n            message: error.message,\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\n            cause: error,\n        });\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = globalThis.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            // https://www.w3.org/TR/webauthn-2/#sctn-discover-from-external-source (Step 5)\n            return new WebAuthnError({\n                message: `${globalThis.location.hostname} is an invalid domain`,\n                code: 'ERROR_INVALID_DOMAIN',\n                cause: error,\n            });\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            // https://www.w3.org/TR/webauthn-2/#sctn-discover-from-external-source (Step 6)\n            return new WebAuthnError({\n                message: `The RP ID \"${publicKey.rpId}\" is invalid for this domain`,\n                code: 'ERROR_INVALID_RP_ID',\n                cause: error,\n            });\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        // https://www.w3.org/TR/webauthn-2/#sctn-op-get-assertion (Step 1)\n        // https://www.w3.org/TR/webauthn-2/#sctn-op-get-assertion (Step 12)\n        return new WebAuthnError({\n            message: 'The authenticator was unable to process the specified options, or could not create a new assertion signature',\n            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',\n            cause: error,\n        });\n    }\n    return error;\n}\n","import { bufferToBase64URLString } from '../helpers/bufferToBase64URLString.js';\nimport { base64URLStringToBuffer } from '../helpers/base64URLStringToBuffer.js';\nimport { browserSupportsWebAuthn } from '../helpers/browserSupportsWebAuthn.js';\nimport { browserSupportsWebAuthnAutofill } from '../helpers/browserSupportsWebAuthnAutofill.js';\nimport { toPublicKeyCredentialDescriptor } from '../helpers/toPublicKeyCredentialDescriptor.js';\nimport { identifyAuthenticationError } from '../helpers/identifyAuthenticationError.js';\nimport { WebAuthnAbortService } from '../helpers/webAuthnAbortService.js';\nimport { toAuthenticatorAttachment } from '../helpers/toAuthenticatorAttachment.js';\n/**\n * Begin authenticator \"login\" via WebAuthn assertion\n *\n * @param optionsJSON Output from **@simplewebauthn/server**'s `generateAuthenticationOptions()`\n * @param useBrowserAutofill (Optional) Initialize conditional UI to enable logging in via browser autofill prompts. Defaults to `false`.\n * @param verifyBrowserAutofillInput (Optional) Ensure a suitable `<input>` element is present when `useBrowserAutofill` is `true`. Defaults to `true`.\n */\nexport async function startAuthentication(options) {\n    // @ts-ignore: Intentionally check for old call structure to warn about improper API call\n    if (!options.optionsJSON && options.challenge) {\n        console.warn('startAuthentication() was not called correctly. It will try to continue with the provided options, but this call should be refactored to use the expected call structure instead. See https://simplewebauthn.dev/docs/packages/browser#typeerror-cannot-read-properties-of-undefined-reading-challenge for more information.');\n        // @ts-ignore: Reassign the options, passed in as a positional argument, to the expected variable\n        options = { optionsJSON: options };\n    }\n    const { optionsJSON, useBrowserAutofill = false, verifyBrowserAutofillInput = true, } = options;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    // We need to avoid passing empty array to avoid blocking retrieval\n    // of public key\n    let allowCredentials;\n    if (optionsJSON.allowCredentials?.length !== 0) {\n        allowCredentials = optionsJSON.allowCredentials?.map(toPublicKeyCredentialDescriptor);\n    }\n    // We need to convert some values to Uint8Arrays before passing the credentials to the navigator\n    const publicKey = {\n        ...optionsJSON,\n        challenge: base64URLStringToBuffer(optionsJSON.challenge),\n        allowCredentials,\n    };\n    // Prepare options for `.get()`\n    const getOptions = {};\n    /**\n     * Set up the page to prompt the user to select a credential for authentication via the browser's\n     * input autofill mechanism.\n     */\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        // Check for an <input> with \"webauthn\" in its `autocomplete` attribute\n        const eligibleInputs = document.querySelectorAll(\"input[autocomplete$='webauthn']\");\n        // WebAuthn autofill requires at least one valid input\n        if (eligibleInputs.length < 1 && verifyBrowserAutofillInput) {\n            throw Error('No <input> with \"webauthn\" as the only or last value in its `autocomplete` attribute was detected');\n        }\n        // `CredentialMediationRequirement` doesn't know about \"conditional\" yet as of\n        // typescript@4.6.3\n        getOptions.mediation = 'conditional';\n        // Conditional UI requires an empty allow list\n        publicKey.allowCredentials = [];\n    }\n    // Finalize options\n    getOptions.publicKey = publicKey;\n    // Set up the ability to cancel this request if the user attempts another\n    getOptions.signal = WebAuthnAbortService.createNewAbortSignal();\n    // Wait for the user to complete assertion\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(getOptions));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options: getOptions });\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToBase64URLString(response.userHandle);\n    }\n    // Convert values to base64 to make it easier to send back to the server\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: toAuthenticatorAttachment(credential.authenticatorAttachment),\n    };\n}\n","import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { startAuthentication } from '@simplewebauthn/browser'\nimport { useOptimistic, useState, useTransition } from 'react'\nimport { data, Form, Link, useNavigate, useSearchParams } from 'react-router'\nimport { HoneypotInputs } from 'remix-utils/honeypot/react'\nimport { z } from 'zod'\nimport { GeneralErrorBoundary } from '#app/components/error-boundary.tsx'\nimport { CheckboxField, ErrorList, Field } from '#app/components/forms.tsx'\nimport { Spacer } from '#app/components/spacer.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { login, requireAnonymous } from '#app/utils/auth.server.ts'\nimport {\n\tProviderConnectionForm,\n\tproviderNames,\n} from '#app/utils/connections.tsx'\nimport { checkHoneypot } from '#app/utils/honeypot.server.ts'\nimport { getErrorMessage, useIsPending } from '#app/utils/misc.tsx'\nimport { PasswordSchema, UsernameSchema } from '#app/utils/user-validation.ts'\nimport { type Route } from './+types/login.ts'\nimport { handleNewSession } from './login.server.ts'\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: () => null,\n}\n\nconst LoginFormSchema = z.object({\n\tusername: UsernameSchema,\n\tpassword: PasswordSchema,\n\tredirectTo: z.string().optional(),\n\tremember: z.boolean().optional(),\n})\n\nconst AuthenticationOptionsSchema = z.object({\n\toptions: z.object({ challenge: z.string() }),\n}) satisfies z.ZodType<{ options: PublicKeyCredentialRequestOptionsJSON }>\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\tawait requireAnonymous(request)\n\treturn {}\n}\n\nexport async function action({ request }: Route.ActionArgs) {\n\tawait requireAnonymous(request)\n\tconst formData = await request.formData()\n\tawait checkHoneypot(formData)\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: (intent) =>\n\t\t\tLoginFormSchema.transform(async (data, ctx) => {\n\t\t\t\tif (intent !== null) return { ...data, session: null }\n\n\t\t\t\tconst session = await login(data)\n\t\t\t\tif (!session) {\n\t\t\t\t\tctx.addIssue({\n\t\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\t\tmessage: 'Invalid username or password',\n\t\t\t\t\t})\n\t\t\t\t\treturn z.NEVER\n\t\t\t\t}\n\n\t\t\t\treturn { ...data, session }\n\t\t\t}),\n\t\tasync: true,\n\t})\n\n\tif (submission.status !== 'success' || !submission.value.session) {\n\t\treturn data(\n\t\t\t{ result: submission.reply({ hideFields: ['password'] }) },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { session, remember, redirectTo } = submission.value\n\n\treturn handleNewSession({\n\t\trequest,\n\t\tsession,\n\t\tremember: remember ?? false,\n\t\tredirectTo,\n\t})\n}\n\nexport default function LoginPage({ actionData }: Route.ComponentProps) {\n\tconst isPending = useIsPending()\n\tconst [searchParams] = useSearchParams()\n\tconst redirectTo = searchParams.get('redirectTo')\n\n\tconst [form, fields] = useForm({\n\t\tid: 'login-form',\n\t\tconstraint: getZodConstraint(LoginFormSchema),\n\t\tdefaultValue: { redirectTo },\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: LoginFormSchema })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<div className=\"flex min-h-full flex-col justify-center pt-20 pb-32\">\n\t\t\t<div className=\"mx-auto w-full max-w-md\">\n\t\t\t\t<div className=\"flex flex-col gap-3 text-center\">\n\t\t\t\t\t<h1 className=\"text-h1\">Welcome back!</h1>\n\t\t\t\t\t<p className=\"text-body-md text-muted-foreground\">\n\t\t\t\t\t\tPlease enter your details.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<Spacer size=\"xs\" />\n\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"mx-auto w-full max-w-md px-8\">\n\t\t\t\t\t\t<Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t\t\t\t\t<HoneypotInputs />\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tlabelProps={{ children: 'Username' }}\n\t\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\t\t...getInputProps(fields.username, { type: 'text' }),\n\t\t\t\t\t\t\t\t\tautoFocus: true,\n\t\t\t\t\t\t\t\t\tclassName: 'lowercase',\n\t\t\t\t\t\t\t\t\tautoComplete: 'username',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\terrors={fields.username.errors}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tlabelProps={{ children: 'Password' }}\n\t\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\t\t...getInputProps(fields.password, {\n\t\t\t\t\t\t\t\t\t\ttype: 'password',\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tautoComplete: 'current-password',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\terrors={fields.password.errors}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<div className=\"flex justify-between\">\n\t\t\t\t\t\t\t\t<CheckboxField\n\t\t\t\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\t\t\t\thtmlFor: fields.remember.id,\n\t\t\t\t\t\t\t\t\t\tchildren: 'Remember me',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tbuttonProps={getInputProps(fields.remember, {\n\t\t\t\t\t\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\terrors={fields.remember.errors}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\tto=\"/forgot-password\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-body-xs font-semibold\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tForgot password?\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t{...getInputProps(fields.redirectTo, { type: 'hidden' })}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t\t\t<div className=\"flex items-center justify-between gap-6 pt-3\">\n\t\t\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\t\tstatus={isPending ? 'pending' : (form.status ?? 'idle')}\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tLog in\n\t\t\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t<hr className=\"my-4\" />\n\t\t\t\t\t\t<div className=\"flex flex-col gap-5\">\n\t\t\t\t\t\t\t<PasskeyLogin\n\t\t\t\t\t\t\t\tredirectTo={redirectTo}\n\t\t\t\t\t\t\t\tremember={fields.remember.value === 'on'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr className=\"my-4\" />\n\t\t\t\t\t\t<ul className=\"flex flex-col gap-5\">\n\t\t\t\t\t\t\t{providerNames.map((providerName) => (\n\t\t\t\t\t\t\t\t<li key={providerName}>\n\t\t\t\t\t\t\t\t\t<ProviderConnectionForm\n\t\t\t\t\t\t\t\t\t\ttype=\"Login\"\n\t\t\t\t\t\t\t\t\t\tproviderName={providerName}\n\t\t\t\t\t\t\t\t\t\tredirectTo={redirectTo}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<div className=\"flex items-center justify-center gap-2 pt-6\">\n\t\t\t\t\t\t\t<span className=\"text-muted-foreground\">New here?</span>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto={\n\t\t\t\t\t\t\t\t\tredirectTo\n\t\t\t\t\t\t\t\t\t\t? `/signup?redirectTo=${encodeURIComponent(redirectTo)}`\n\t\t\t\t\t\t\t\t\t\t: '/signup'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tCreate an account\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst VerificationResponseSchema = z.discriminatedUnion('status', [\n\tz.object({\n\t\tstatus: z.literal('success'),\n\t\tlocation: z.string(),\n\t}),\n\tz.object({\n\t\tstatus: z.literal('error'),\n\t\terror: z.string(),\n\t}),\n])\n\nfunction PasskeyLogin({\n\tredirectTo,\n\tremember,\n}: {\n\tredirectTo: string | null\n\tremember: boolean\n}) {\n\tconst [isPending] = useTransition()\n\tconst [error, setError] = useState<string | null>(null)\n\tconst [passkeyMessage, setPasskeyMessage] = useOptimistic<string | null>(\n\t\t'Login with a passkey',\n\t)\n\tconst navigate = useNavigate()\n\n\tasync function handlePasskeyLogin() {\n\t\ttry {\n\t\t\tsetPasskeyMessage('Generating Authentication Options')\n\t\t\t// Get authentication options from the server\n\t\t\tconst optionsResponse = await fetch('/webauthn/authentication')\n\t\t\tconst json = await optionsResponse.json()\n\t\t\tconst { options } = AuthenticationOptionsSchema.parse(json)\n\n\t\t\tsetPasskeyMessage('Requesting your authorization')\n\t\t\tconst authResponse = await startAuthentication({ optionsJSON: options })\n\t\t\tsetPasskeyMessage('Verifying your passkey')\n\n\t\t\t// Verify the authentication with the server\n\t\t\tconst verificationResponse = await fetch('/webauthn/authentication', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({ authResponse, remember, redirectTo }),\n\t\t\t})\n\n\t\t\tconst verificationJson = await verificationResponse.json().catch(() => ({\n\t\t\t\tstatus: 'error',\n\t\t\t\terror: 'Unknown error',\n\t\t\t}))\n\n\t\t\tconst parsedResult =\n\t\t\t\tVerificationResponseSchema.safeParse(verificationJson)\n\t\t\tif (!parsedResult.success) {\n\t\t\t\tthrow new Error(parsedResult.error.message)\n\t\t\t} else if (parsedResult.data.status === 'error') {\n\t\t\t\tthrow new Error(parsedResult.data.error)\n\t\t\t}\n\t\t\tconst { location } = parsedResult.data\n\n\t\t\tsetPasskeyMessage(\"You're logged in! Navigating...\")\n\t\t\tawait navigate(location ?? '/')\n\t\t} catch (e) {\n\t\t\tconst errorMessage = getErrorMessage(e)\n\t\t\tsetError(`Failed to authenticate with passkey: ${errorMessage}`)\n\t\t}\n\t}\n\n\treturn (\n\t\t<form action={handlePasskeyLogin}>\n\t\t\t<StatusButton\n\t\t\t\tid=\"passkey-login-button\"\n\t\t\t\taria-describedby=\"passkey-login-button-error\"\n\t\t\t\tclassName=\"w-full\"\n\t\t\t\tstatus={isPending ? 'pending' : error ? 'error' : 'idle'}\n\t\t\t\ttype=\"submit\"\n\t\t\t\tdisabled={isPending}\n\t\t\t>\n\t\t\t\t<span className=\"inline-flex items-center gap-1.5\">\n\t\t\t\t\t<Icon name=\"passkey\" />\n\t\t\t\t\t<span>{passkeyMessage}</span>\n\t\t\t\t</span>\n\t\t\t</StatusButton>\n\t\t\t<div className=\"mt-2\">\n\t\t\t\t<ErrorList errors={[error]} id=\"passkey-login-button-error\" />\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nexport const meta: Route.MetaFunction = () => {\n\treturn [{ title: 'Login to Epic Notes' }]\n}\n\nexport function ErrorBoundary() {\n\treturn <GeneralErrorBoundary />\n}\n"],"names":["browserSupportsWebAuthnAutofill","browserSupportsWebAuthn","_browserSupportsWebAuthnAutofillInternals","resolve","globalPublicKeyCredential","value","identifyAuthenticationError","error","options","publicKey","WebAuthnError","effectiveDomain","isValidDomain","startAuthentication","optionsJSON","useBrowserAutofill","verifyBrowserAutofillInput","allowCredentials","toPublicKeyCredentialDescriptor","base64URLStringToBuffer","getOptions","WebAuthnAbortService","credential","err","id","rawId","response","type","userHandle","bufferToBase64URLString","toAuthenticatorAttachment","handle","getSitemapEntries","LoginFormSchema","z","username","UsernameSchema","password","PasswordSchema","redirectTo","optional","remember","AuthenticationOptionsSchema","challenge","login","_UNSAFE_withComponentProps","actionData","isPending","useIsPending","searchParams","useSearchParams","get","form","fields","useForm","constraint","getZodConstraint","defaultValue","lastResult","result","onValidate","formData","parseWithZod","schema","shouldRevalidate","className","children","jsxs","jsx","Spacer","size","Form","method","getFormProps","HoneypotInputs","Field","labelProps","inputProps","getInputProps","autoFocus","autoComplete","errors","CheckboxField","htmlFor","buttonProps","Link","to","ErrorList","errorId","StatusButton","status","disabled","PasskeyLogin","map","providerName","ProviderConnectionForm","encodeURIComponent","VerificationResponseSchema","location","useTransition","setError","useState","passkeyMessage","setPasskeyMessage","useOptimistic","navigate","useNavigate","handlePasskeyLogin","json","fetch","parse","authResponse","verificationJson","headers","body","JSON","stringify","catch","parsedResult","safeParse","success","data","Error","message","e","errorMessage","getErrorMessage","action","Icon","name","meta","title","ErrorBoundary","_UNSAFE_withErrorBoundaryProps","GeneralErrorBoundary"],"mappings":"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","x_google_ignoreList":[0,1,2]}