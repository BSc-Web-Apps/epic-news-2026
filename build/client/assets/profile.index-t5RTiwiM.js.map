{"version":3,"file":"profile.index-t5RTiwiM.js","sources":["../../../app/routes/settings+/profile.index.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { invariantResponse } from '@epic-web/invariant'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { Img } from 'openimg/react'\nimport { data, Link, useFetcher } from 'react-router'\nimport { z } from 'zod'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Button } from '#app/components/ui/button.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { requireUserId, sessionKey } from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { getUserImgSrc, useDoubleCheck } from '#app/utils/misc.tsx'\nimport { authSessionStorage } from '#app/utils/session.server.ts'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport { NameSchema, UsernameSchema } from '#app/utils/user-validation.ts'\nimport { type Route } from './+types/profile.index.ts'\nimport { twoFAVerificationType } from './profile.two-factor.tsx'\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: () => null,\n}\n\nconst ProfileFormSchema = z.object({\n\tname: NameSchema.nullable().default(null),\n\tusername: UsernameSchema,\n})\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\tconst userId = await requireUserId(request)\n\tconst user = await prisma.user.findUniqueOrThrow({\n\t\twhere: { id: userId },\n\t\tselect: {\n\t\t\tid: true,\n\t\t\tname: true,\n\t\t\tusername: true,\n\t\t\temail: true,\n\t\t\timage: {\n\t\t\t\tselect: { objectKey: true },\n\t\t\t},\n\t\t\t_count: {\n\t\t\t\tselect: {\n\t\t\t\t\tsessions: {\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\texpirationDate: { gt: new Date() },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\tconst twoFactorVerification = await prisma.verification.findUnique({\n\t\tselect: { id: true },\n\t\twhere: { target_type: { type: twoFAVerificationType, target: userId } },\n\t})\n\n\tconst password = await prisma.password.findUnique({\n\t\tselect: { userId: true },\n\t\twhere: { userId },\n\t})\n\n\treturn {\n\t\tuser,\n\t\thasPassword: Boolean(password),\n\t\tisTwoFactorEnabled: Boolean(twoFactorVerification),\n\t}\n}\n\ntype ProfileActionArgs = {\n\trequest: Request\n\tuserId: string\n\tformData: FormData\n}\nconst profileUpdateActionIntent = 'update-profile'\nconst signOutOfSessionsActionIntent = 'sign-out-of-sessions'\nconst deleteDataActionIntent = 'delete-data'\n\nexport async function action({ request }: Route.ActionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst formData = await request.formData()\n\tconst intent = formData.get('intent')\n\tswitch (intent) {\n\t\tcase profileUpdateActionIntent: {\n\t\t\treturn profileUpdateAction({ request, userId, formData })\n\t\t}\n\t\tcase signOutOfSessionsActionIntent: {\n\t\t\treturn signOutOfSessionsAction({ request, userId, formData })\n\t\t}\n\t\tcase deleteDataActionIntent: {\n\t\t\treturn deleteDataAction({ request, userId, formData })\n\t\t}\n\t\tdefault: {\n\t\t\tthrow new Response(`Invalid intent \"${intent}\"`, { status: 400 })\n\t\t}\n\t}\n}\n\nexport default function EditUserProfile({ loaderData }: Route.ComponentProps) {\n\treturn (\n\t\t<div className=\"flex flex-col gap-12\">\n\t\t\t<div className=\"flex justify-center\">\n\t\t\t\t<div className=\"relative size-52\">\n\t\t\t\t\t<Img\n\t\t\t\t\t\tsrc={getUserImgSrc(loaderData.user.image?.objectKey)}\n\t\t\t\t\t\talt={loaderData.user.name ?? loaderData.user.username}\n\t\t\t\t\t\tclassName=\"h-full w-full rounded-full object-cover\"\n\t\t\t\t\t\twidth={832}\n\t\t\t\t\t\theight={832}\n\t\t\t\t\t\tisAboveFold\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tasChild\n\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\tclassName=\"absolute top-3 -right-3 flex size-10 items-center justify-center rounded-full p-0\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tpreventScrollReset\n\t\t\t\t\t\t\tto=\"photo\"\n\t\t\t\t\t\t\ttitle=\"Change profile photo\"\n\t\t\t\t\t\t\taria-label=\"Change profile photo\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon name=\"camera\" className=\"size-4\" />\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<UpdateProfile loaderData={loaderData} />\n\n\t\t\t<div className=\"border-foreground col-span-6 my-6 h-1 border-b-[1.5px]\" />\n\t\t\t<div className=\"col-span-full flex flex-col gap-6\">\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"change-email\">\n\t\t\t\t\t\t<Icon name=\"envelope-closed\">\n\t\t\t\t\t\t\tChange email from {loaderData.user.email}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"two-factor\">\n\t\t\t\t\t\t{loaderData.isTwoFactorEnabled ? (\n\t\t\t\t\t\t\t<Icon name=\"lock-closed\">2FA is enabled</Icon>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Icon name=\"lock-open-1\">Enable 2FA</Icon>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to={loaderData.hasPassword ? 'password' : 'password/create'}>\n\t\t\t\t\t\t<Icon name=\"dots-horizontal\">\n\t\t\t\t\t\t\t{loaderData.hasPassword ? 'Change Password' : 'Create a Password'}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"connections\">\n\t\t\t\t\t\t<Icon name=\"link-2\">Manage connections</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"passkeys\">\n\t\t\t\t\t\t<Icon name=\"passkey\">Manage passkeys</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link\n\t\t\t\t\t\treloadDocument\n\t\t\t\t\t\tdownload=\"my-epic-notes-data.json\"\n\t\t\t\t\t\tto=\"/resources/download-user-data\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Icon name=\"download\">Download your data</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<SignOutOfSessions loaderData={loaderData} />\n\t\t\t\t<DeleteData />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nasync function profileUpdateAction({ userId, formData }: ProfileActionArgs) {\n\tconst submission = await parseWithZod(formData, {\n\t\tasync: true,\n\t\tschema: ProfileFormSchema.superRefine(async ({ username }, ctx) => {\n\t\t\tconst existingUsername = await prisma.user.findUnique({\n\t\t\t\twhere: { username },\n\t\t\t\tselect: { id: true },\n\t\t\t})\n\t\t\tif (existingUsername && existingUsername.id !== userId) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['username'],\n\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\tmessage: 'A user already exists with this username',\n\t\t\t\t})\n\t\t\t}\n\t\t}),\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn data(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { username, name } = submission.value\n\n\tawait prisma.user.update({\n\t\tselect: { username: true },\n\t\twhere: { id: userId },\n\t\tdata: {\n\t\t\tname: name,\n\t\t\tusername: username,\n\t\t},\n\t})\n\n\treturn {\n\t\tresult: submission.reply(),\n\t}\n}\n\nfunction UpdateProfile({\n\tloaderData,\n}: {\n\tloaderData: Route.ComponentProps['loaderData']\n}) {\n\tconst fetcher = useFetcher<typeof profileUpdateAction>()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'edit-profile',\n\t\tconstraint: getZodConstraint(ProfileFormSchema),\n\t\tlastResult: fetcher.data?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ProfileFormSchema })\n\t\t},\n\t\tdefaultValue: {\n\t\t\tusername: loaderData.user.username,\n\t\t\tname: loaderData.user.name,\n\t\t},\n\t})\n\n\treturn (\n\t\t<fetcher.Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t<div className=\"grid grid-cols-6 gap-x-10\">\n\t\t\t\t<Field\n\t\t\t\t\tclassName=\"col-span-3\"\n\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\thtmlFor: fields.username.id,\n\t\t\t\t\t\tchildren: 'Username',\n\t\t\t\t\t}}\n\t\t\t\t\tinputProps={getInputProps(fields.username, { type: 'text' })}\n\t\t\t\t\terrors={fields.username.errors}\n\t\t\t\t/>\n\t\t\t\t<Field\n\t\t\t\t\tclassName=\"col-span-3\"\n\t\t\t\t\tlabelProps={{ htmlFor: fields.name.id, children: 'Name' }}\n\t\t\t\t\tinputProps={getInputProps(fields.name, { type: 'text' })}\n\t\t\t\t\terrors={fields.name.errors}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t<div className=\"mt-8 flex justify-center\">\n\t\t\t\t<StatusButton\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tsize=\"wide\"\n\t\t\t\t\tname=\"intent\"\n\t\t\t\t\tvalue={profileUpdateActionIntent}\n\t\t\t\t\tstatus={\n\t\t\t\t\t\tfetcher.state !== 'idle' ? 'pending' : (form.status ?? 'idle')\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\tSave changes\n\t\t\t\t</StatusButton>\n\t\t\t</div>\n\t\t</fetcher.Form>\n\t)\n}\n\nasync function signOutOfSessionsAction({ request, userId }: ProfileActionArgs) {\n\tconst authSession = await authSessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst sessionId = authSession.get(sessionKey)\n\tinvariantResponse(\n\t\tsessionId,\n\t\t'You must be authenticated to sign out of other sessions',\n\t)\n\tawait prisma.session.deleteMany({\n\t\twhere: {\n\t\t\tuserId,\n\t\t\tid: { not: sessionId },\n\t\t},\n\t})\n\treturn { status: 'success' } as const\n}\n\nfunction SignOutOfSessions({\n\tloaderData,\n}: {\n\tloaderData: Route.ComponentProps['loaderData']\n}) {\n\tconst dc = useDoubleCheck()\n\n\tconst fetcher = useFetcher<typeof signOutOfSessionsAction>()\n\tconst otherSessionsCount = loaderData.user._count.sessions - 1\n\treturn (\n\t\t<div>\n\t\t\t{otherSessionsCount ? (\n\t\t\t\t<fetcher.Form method=\"POST\">\n\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t{...dc.getButtonProps({\n\t\t\t\t\t\t\ttype: 'submit',\n\t\t\t\t\t\t\tname: 'intent',\n\t\t\t\t\t\t\tvalue: signOutOfSessionsActionIntent,\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tvariant={dc.doubleCheck ? 'destructive' : 'default'}\n\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\tfetcher.state !== 'idle'\n\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t: (fetcher.data?.status ?? 'idle')\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Icon name=\"avatar\">\n\t\t\t\t\t\t\t{dc.doubleCheck\n\t\t\t\t\t\t\t\t? `Are you sure?`\n\t\t\t\t\t\t\t\t: `Sign out of ${otherSessionsCount} other sessions`}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</StatusButton>\n\t\t\t\t</fetcher.Form>\n\t\t\t) : (\n\t\t\t\t<Icon name=\"avatar\">This is your only session</Icon>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nasync function deleteDataAction({ userId }: ProfileActionArgs) {\n\tawait prisma.user.delete({ where: { id: userId } })\n\treturn redirectWithToast('/', {\n\t\ttype: 'success',\n\t\ttitle: 'Data Deleted',\n\t\tdescription: 'All of your data has been deleted',\n\t})\n}\n\nfunction DeleteData() {\n\tconst dc = useDoubleCheck()\n\n\tconst fetcher = useFetcher<typeof deleteDataAction>()\n\treturn (\n\t\t<div>\n\t\t\t<fetcher.Form method=\"POST\">\n\t\t\t\t<StatusButton\n\t\t\t\t\t{...dc.getButtonProps({\n\t\t\t\t\t\ttype: 'submit',\n\t\t\t\t\t\tname: 'intent',\n\t\t\t\t\t\tvalue: deleteDataActionIntent,\n\t\t\t\t\t})}\n\t\t\t\t\tvariant={dc.doubleCheck ? 'destructive' : 'default'}\n\t\t\t\t\tstatus={fetcher.state !== 'idle' ? 'pending' : 'idle'}\n\t\t\t\t>\n\t\t\t\t\t<Icon name=\"trash\">\n\t\t\t\t\t\t{dc.doubleCheck ? `Are you sure?` : `Delete all your data`}\n\t\t\t\t\t</Icon>\n\t\t\t\t</StatusButton>\n\t\t\t</fetcher.Form>\n\t\t</div>\n\t)\n}\n"],"names":["handle","getSitemapEntries","ProfileFormSchema","z","name","NameSchema","nullable","default","username","UsernameSchema","profileUpdateActionIntent","signOutOfSessionsActionIntent","deleteDataActionIntent","profile_index","_UNSAFE_withComponentProps","loaderData","jsxs","className","children","jsx","Img","src","getUserImgSrc","user","image","objectKey","alt","width","height","isAboveFold","Button","asChild","variant","Link","preventScrollReset","to","title","Icon","UpdateProfile","email","isTwoFactorEnabled","hasPassword","reloadDocument","download","SignOutOfSessions","DeleteData","fetcher","useFetcher","form","fields","useForm","id","constraint","getZodConstraint","lastResult","data","result","onValidate","formData","parseWithZod","schema","defaultValue","Form","method","getFormProps","Field","labelProps","htmlFor","inputProps","getInputProps","type","errors","ErrorList","errorId","StatusButton","size","value","status","state","dc","useDoubleCheck","otherSessionsCount","_count","sessions","getButtonProps","doubleCheck"],"mappings":"oqBAoBO,MAAMA,EAAoB,CAChCC,kBAAmBA,IAAM,IAC1B,EAEMC,EAAoBC,EAAS,CAClCC,KAAMC,EAAWC,WAAWC,QAAQ,IAAI,EACxCC,SAAUC,CACX,CAAC,EAgDKC,EAA4B,iBAC5BC,EAAgC,uBAChCC,EAAyB,cAsB/BC,EAAAC,EAAA,SAAwC,CAAEC,WAAAA,CAAW,EAAyB,CAC7E,OACCC,EAAAA,KAAC,MAAA,CAAIC,UAAU,uBACdC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,sBACdC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,mBACdC,SAAA,CAAAC,EAAAA,IAACC,EAAA,CACAC,IAAKC,EAAcP,EAAWQ,KAAKC,OAAOC,SAAS,EACnDC,IAAKX,EAAWQ,KAAKnB,MAAQW,EAAWQ,KAAKf,SAC7CS,UAAU,0CACVU,MAAO,IACPC,OAAQ,IACRC,YAAW,EAAA,CACZ,EACAV,EAAAA,IAACW,EAAA,CACAC,QAAO,GACPC,QAAQ,UACRf,UAAU,oFAEVC,SAAAC,EAAAA,IAACc,EAAA,CACAC,mBAAkB,GAClBC,GAAG,QACHC,MAAM,uBACN,aAAW,uBAEXlB,SAAAC,EAAAA,IAACkB,EAAA,CAAKjC,KAAK,SAASa,UAAU,SAAS,EACxC,CAAA,CACD,CAAA,EACD,CAAA,CACD,EACAE,EAAAA,IAACmB,GAAcvB,WAAAA,CAAA,CAAwB,EAEvCI,EAAAA,IAAC,MAAA,CAAIF,UAAU,wDAAA,CAAyD,EACxED,EAAAA,KAAC,MAAA,CAAIC,UAAU,oCACdC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CACAD,eAACe,EAAA,CAAKE,GAAG,eACRjB,SAAAF,EAAAA,KAACqB,EAAA,CAAKjC,KAAK,kBAAkBc,SAAA,CAAA,qBACTH,EAAWQ,KAAKgB,KAAA,EACpC,EACD,CAAA,CACD,EACApB,EAAAA,IAAC,OACAD,SAAAC,EAAAA,IAACc,EAAA,CAAKE,GAAG,aACPjB,SAAAH,EAAWyB,mBACXrB,EAAAA,IAACkB,EAAA,CAAKjC,KAAK,cAAcc,SAAA,gBAAA,CAAc,EAEvCC,EAAAA,IAACkB,EAAA,CAAKjC,KAAK,cAAcc,SAAA,aAAU,EAErC,CAAA,CACD,QACC,MAAA,CACAA,SAAAC,EAAAA,IAACc,GAAKE,GAAIpB,EAAW0B,YAAc,WAAa,kBAC/CvB,SAAAC,EAAAA,IAACkB,EAAA,CAAKjC,KAAK,kBACTc,SAAAH,EAAW0B,YAAc,kBAAoB,oBAC/C,EACD,CAAA,CACD,EACAtB,EAAAA,IAAC,MAAA,CACAD,SAAAC,EAAAA,IAACc,EAAA,CAAKE,GAAG,cACRjB,SAAAC,EAAAA,IAACkB,EAAA,CAAKjC,KAAK,SAASc,SAAA,qBAAkB,EACvC,CAAA,CACD,EACAC,EAAAA,IAAC,MAAA,CACAD,SAAAC,EAAAA,IAACc,EAAA,CAAKE,GAAG,WACRjB,SAAAC,EAAAA,IAACkB,EAAA,CAAKjC,KAAK,UAAUc,SAAA,kBAAe,EACrC,CAAA,CACD,QACC,MAAA,CACAA,SAAAC,EAAAA,IAACc,EAAA,CACAS,eAAc,GACdC,SAAS,0BACTR,GAAG,gCAEHjB,SAAAC,EAAAA,IAACkB,EAAA,CAAKjC,KAAK,WAAWc,SAAA,qBAAkB,EACzC,CAAA,CACD,EACAC,EAAAA,IAACyB,GAAkB7B,WAAAA,EAAwB,QAC1C8B,EAAA,EAAW,CAAA,CAAA,CACb,CAAA,CAAA,CACD,CAEF,CAAA,EA0CA,SAASP,EAAc,CACtBvB,WAAAA,CACD,EAEG,CACF,MAAM+B,EAAUC,EAAA,EAEV,CAACC,EAAMC,CAAM,EAAIC,EAAQ,CAC9BC,GAAI,eACJC,WAAYC,EAAiBnD,CAAiB,EAC9CoD,WAAYR,EAAQS,MAAMC,OAC1BC,WAAW,CAAEC,SAAAA,CAAS,EAAG,CACxB,OAAOC,EAAaD,EAAU,CAAEE,OAAQ1D,CAAkB,CAAC,GAE5D2D,aAAc,CACbrD,SAAUO,EAAWQ,KAAKf,SAC1BJ,KAAMW,EAAWQ,KAAKnB,IACvB,CACD,CAAC,EAED,OACCY,EAAAA,KAAC8B,EAAQgB,KAAR,CAAaC,OAAO,OAAQ,GAAGC,EAAahB,CAAI,EAChD9B,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,4BACdC,SAAA,CAAAC,EAAAA,IAAC8C,EAAA,CACAhD,UAAU,aACViD,WAAY,CACXC,QAASlB,EAAOzC,SAAS2C,GACzBjC,SAAU,YAEXkD,WAAYC,EAAcpB,EAAOzC,SAAU,CAAE8D,KAAM,MAAO,CAAC,EAC3DC,OAAQtB,EAAOzC,SAAS+D,MAAA,CACzB,EACApD,EAAAA,IAAC8C,EAAA,CACAhD,UAAU,aACViD,WAAY,CAAEC,QAASlB,EAAO7C,KAAK+C,GAAIjC,SAAU,QACjDkD,WAAYC,EAAcpB,EAAO7C,KAAM,CAAEkE,KAAM,MAAO,CAAC,EACvDC,OAAQtB,EAAO7C,KAAKmE,MAAA,CACrB,CAAA,CAAA,CACD,QAECC,EAAA,CAAUD,OAAQvB,EAAKuB,OAAQpB,GAAIH,EAAKyB,OAAA,CAAS,EAElDtD,EAAAA,IAAC,MAAA,CAAIF,UAAU,2BACdC,SAAAC,EAAAA,IAACuD,EAAA,CACAJ,KAAK,SACLK,KAAK,OACLvE,KAAK,SACLwE,MAAOlE,EACPmE,OACC/B,EAAQgC,QAAU,OAAS,UAAa9B,EAAK6B,QAAU,OAExD3D,SAAA,eAED,CAAA,CACD,CAAA,CAAA,CACD,CAEF,CAoBA,SAAS0B,EAAkB,CAC1B7B,WAAAA,CACD,EAEG,CACF,MAAMgE,EAAKC,EAAA,EAELlC,EAAUC,EAAA,EACVkC,EAAqBlE,EAAWQ,KAAK2D,OAAOC,SAAW,EAC7D,OACChE,EAAAA,IAAC,OACCD,SAAA+D,EACA9D,MAAC2B,EAAQgB,KAAR,CAAaC,OAAO,OACpB7C,SAAAC,EAAAA,IAACuD,EAAA,CACC,GAAGK,EAAGK,eAAe,CACrBd,KAAM,SACNlE,KAAM,SACNwE,MAAOjE,CACR,CAAC,EACDqB,QAAS+C,EAAGM,YAAc,cAAgB,UAC1CR,OACC/B,EAAQgC,QAAU,OACf,UACChC,EAAQS,MAAMsB,QAAU,OAG7B3D,SAAAC,EAAAA,IAACkB,GAAKjC,KAAK,SACTc,WAAGmE,YACD,gBACA,eAAeJ,CAAkB,kBACrC,EACD,EACD,EAEA9D,EAAAA,IAACkB,GAAKjC,KAAK,SAASc,qCAAyB,CAAA,CAE/C,CAEF,CAWA,SAAS2B,GAAa,CACrB,MAAMkC,EAAKC,EAAA,EAELlC,EAAUC,EAAA,EAChB,aACE,MAAA,CACA7B,SAAAC,EAAAA,IAAC2B,EAAQgB,KAAR,CAAaC,OAAO,OACpB7C,SAAAC,EAAAA,IAACuD,EAAA,CACC,GAAGK,EAAGK,eAAe,CACrBd,KAAM,SACNlE,KAAM,SACNwE,MAAOhE,CACR,CAAC,EACDoB,QAAS+C,EAAGM,YAAc,cAAgB,UAC1CR,OAAQ/B,EAAQgC,QAAU,OAAS,UAAY,OAE/C5D,eAACmB,EAAA,CAAKjC,KAAK,QACTc,SAAA6D,EAAGM,YAAc,gBAAkB,uBACrC,EACD,EACD,CAAA,CACD,CAEF"}