{"version":3,"file":"profile.two-factor.verify-DEjd6VJM.js","sources":["../../../app/routes/settings+/profile.two-factor.verify.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport * as QRCode from 'qrcode'\nimport { data, redirect, Form, useNavigation } from 'react-router'\nimport { z } from 'zod'\nimport { ErrorList, OTPField } from '#app/components/forms.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { isCodeValid } from '#app/routes/_auth+/verify.server.ts'\nimport { requireUserId } from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { getDomainUrl, useIsPending } from '#app/utils/misc.tsx'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport { getTOTPAuthUri } from '#app/utils/totp.server.ts'\nimport { type Route } from './+types/profile.two-factor.verify.ts'\nimport { type BreadcrumbHandle } from './profile.tsx'\nimport { twoFAVerificationType } from './profile.two-factor.tsx'\n\nexport const handle: BreadcrumbHandle & SEOHandle = {\n\tbreadcrumb: <Icon name=\"check\">Verify</Icon>,\n\tgetSitemapEntries: () => null,\n}\n\nconst CancelSchema = z.object({ intent: z.literal('cancel') })\nconst VerifySchema = z.object({\n\tintent: z.literal('verify'),\n\tcode: z.string().min(6).max(6),\n})\n\nconst ActionSchema = z.discriminatedUnion('intent', [\n\tCancelSchema,\n\tVerifySchema,\n])\n\nexport const twoFAVerifyVerificationType = '2fa-verify'\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\tconst userId = await requireUserId(request)\n\tconst verification = await prisma.verification.findUnique({\n\t\twhere: {\n\t\t\ttarget_type: { type: twoFAVerifyVerificationType, target: userId },\n\t\t},\n\t\tselect: {\n\t\t\tid: true,\n\t\t\talgorithm: true,\n\t\t\tsecret: true,\n\t\t\tperiod: true,\n\t\t\tdigits: true,\n\t\t},\n\t})\n\tif (!verification) {\n\t\treturn redirect('/settings/profile/two-factor')\n\t}\n\tconst user = await prisma.user.findUniqueOrThrow({\n\t\twhere: { id: userId },\n\t\tselect: { email: true },\n\t})\n\tconst issuer = new URL(getDomainUrl(request)).host\n\tconst otpUri = getTOTPAuthUri({\n\t\t...verification,\n\t\taccountName: user.email,\n\t\tissuer,\n\t})\n\tconst qrCode = await QRCode.toDataURL(otpUri)\n\treturn { otpUri, qrCode }\n}\n\nexport async function action({ request }: Route.ActionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst formData = await request.formData()\n\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: () =>\n\t\t\tActionSchema.superRefine(async (data, ctx) => {\n\t\t\t\tif (data.intent === 'cancel') return null\n\t\t\t\tconst codeIsValid = await isCodeValid({\n\t\t\t\t\tcode: data.code,\n\t\t\t\t\ttype: twoFAVerifyVerificationType,\n\t\t\t\t\ttarget: userId,\n\t\t\t\t})\n\t\t\t\tif (!codeIsValid) {\n\t\t\t\t\tctx.addIssue({\n\t\t\t\t\t\tpath: ['code'],\n\t\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\t\tmessage: `Invalid code`,\n\t\t\t\t\t})\n\t\t\t\t\treturn z.NEVER\n\t\t\t\t}\n\t\t\t}),\n\t\tasync: true,\n\t})\n\n\tif (submission.status !== 'success') {\n\t\treturn data(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tswitch (submission.value.intent) {\n\t\tcase 'cancel': {\n\t\t\tawait prisma.verification.deleteMany({\n\t\t\t\twhere: { type: twoFAVerifyVerificationType, target: userId },\n\t\t\t})\n\t\t\treturn redirect('/settings/profile/two-factor')\n\t\t}\n\t\tcase 'verify': {\n\t\t\tawait prisma.verification.update({\n\t\t\t\twhere: {\n\t\t\t\t\ttarget_type: { type: twoFAVerifyVerificationType, target: userId },\n\t\t\t\t},\n\t\t\t\tdata: { type: twoFAVerificationType },\n\t\t\t})\n\t\t\treturn redirectWithToast('/settings/profile/two-factor', {\n\t\t\t\ttype: 'success',\n\t\t\t\ttitle: 'Enabled',\n\t\t\t\tdescription: 'Two-factor authentication has been enabled.',\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport default function TwoFactorRoute({\n\tloaderData,\n\tactionData,\n}: Route.ComponentProps) {\n\tconst navigation = useNavigation()\n\n\tconst isPending = useIsPending()\n\tconst pendingIntent = isPending ? navigation.formData?.get('intent') : null\n\n\tconst [form, fields] = useForm({\n\t\tid: 'verify-form',\n\t\tconstraint: getZodConstraint(ActionSchema),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ActionSchema })\n\t\t},\n\t})\n\tconst lastSubmissionIntent = fields.intent.value\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"flex flex-col items-center gap-4\">\n\t\t\t\t<img alt=\"qr code\" src={loaderData.qrCode} className=\"size-56\" />\n\t\t\t\t<p>Scan this QR code with your authenticator app.</p>\n\t\t\t\t<p className=\"text-sm\">\n\t\t\t\t\tIf you cannot scan the QR code, you can manually add this account to\n\t\t\t\t\tyour authenticator app using this code:\n\t\t\t\t</p>\n\t\t\t\t<div className=\"p-3\">\n\t\t\t\t\t<pre\n\t\t\t\t\t\tclassName=\"text-sm break-all whitespace-pre-wrap\"\n\t\t\t\t\t\taria-label=\"One-time Password URI\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{loaderData.otpUri}\n\t\t\t\t\t</pre>\n\t\t\t\t</div>\n\t\t\t\t<p className=\"text-sm\">\n\t\t\t\t\tOnce you've added the account, enter the code from your authenticator\n\t\t\t\t\tapp below. Once you enable 2FA, you will need to enter a code from\n\t\t\t\t\tyour authenticator app every time you log in or perform important\n\t\t\t\t\tactions. Do not lose access to your authenticator app, or you will\n\t\t\t\t\tlose access to your account.\n\t\t\t\t</p>\n\t\t\t\t<div className=\"flex w-full max-w-xs flex-col justify-center gap-4\">\n\t\t\t\t\t<Form method=\"POST\" {...getFormProps(form)} className=\"flex-1\">\n\t\t\t\t\t\t<div className=\"flex items-center justify-center\">\n\t\t\t\t\t\t\t<OTPField\n\t\t\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\t\t\thtmlFor: fields.code.id,\n\t\t\t\t\t\t\t\t\tchildren: 'Code',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t\t\t...getInputProps(fields.code, { type: 'text' }),\n\t\t\t\t\t\t\t\t\tautoFocus: true,\n\t\t\t\t\t\t\t\t\tautoComplete: 'one-time-code',\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\terrors={fields.code.errors}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"min-h-[32px] px-4 pt-1 pb-3\">\n\t\t\t\t\t\t\t<ErrorList id={form.errorId} errors={form.errors} />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex justify-between gap-4\">\n\t\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\t\t\tpendingIntent === 'verify'\n\t\t\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t\t\t: lastSubmissionIntent === 'verify'\n\t\t\t\t\t\t\t\t\t\t\t? (form.status ?? 'idle')\n\t\t\t\t\t\t\t\t\t\t\t: 'idle'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tname=\"intent\"\n\t\t\t\t\t\t\t\tvalue=\"verify\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\t\t\tpendingIntent === 'cancel'\n\t\t\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t\t\t: lastSubmissionIntent === 'cancel'\n\t\t\t\t\t\t\t\t\t\t\t? (form.status ?? 'idle')\n\t\t\t\t\t\t\t\t\t\t\t: 'idle'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tname=\"intent\"\n\t\t\t\t\t\t\t\tvalue=\"cancel\"\n\t\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"],"names":["handle","breadcrumb","jsx","Icon","name","children","getSitemapEntries","CancelSchema","z","intent","VerifySchema","code","min","max","ActionSchema","profile_twoFactor_verify","_UNSAFE_withComponentProps","loaderData","actionData","navigation","useNavigation","isPending","useIsPending","pendingIntent","formData","get","form","fields","useForm","id","constraint","getZodConstraint","lastResult","result","onValidate","parseWithZod","schema","lastSubmissionIntent","value","jsxs","className","alt","src","qrCode","otpUri","Form","method","getFormProps","OTPField","labelProps","htmlFor","inputProps","getInputProps","type","autoFocus","autoComplete","errors","ErrorList","errorId","StatusButton","status","variant","disabled"],"mappings":"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"}