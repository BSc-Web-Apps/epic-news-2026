{"version":3,"file":"user-validation-CltVSBa4.js","sources":["../../../app/utils/user-validation.ts"],"sourcesContent":["import { z } from 'zod'\n\nexport const USERNAME_MIN_LENGTH = 3\nexport const USERNAME_MAX_LENGTH = 20\n\nexport const UsernameSchema = z\n\t.string({ required_error: 'Username is required' })\n\t.min(USERNAME_MIN_LENGTH, { message: 'Username is too short' })\n\t.max(USERNAME_MAX_LENGTH, { message: 'Username is too long' })\n\t.regex(/^[a-zA-Z0-9_]+$/, {\n\t\tmessage: 'Username can only include letters, numbers, and underscores',\n\t})\n\t// users can type the username in any case, but we store it in lowercase\n\t.transform((value) => value.toLowerCase())\n\nexport const PasswordSchema = z\n\t.string({ required_error: 'Password is required' })\n\t.min(6, { message: 'Password is too short' })\n\t// NOTE: bcrypt has a limit of 72 bytes (which should be plenty long)\n\t// https://github.com/epicweb-dev/epic-stack/issues/918\n\t.refine((val) => new TextEncoder().encode(val).length <= 72, {\n\t\tmessage: 'Password is too long',\n\t})\n\nexport const NameSchema = z\n\t.string({ required_error: 'Name is required' })\n\t.min(3, { message: 'Name is too short' })\n\t.max(40, { message: 'Name is too long' })\n\nexport const EmailSchema = z\n\t.string({ required_error: 'Email is required' })\n\t.email({ message: 'Email is invalid' })\n\t.min(3, { message: 'Email is too short' })\n\t.max(100, { message: 'Email is too long' })\n\t// users can type the email in any case, but we store it in lowercase\n\t.transform((value) => value.toLowerCase())\n\nexport const PasswordAndConfirmPasswordSchema = z\n\t.object({ password: PasswordSchema, confirmPassword: PasswordSchema })\n\t.superRefine(({ confirmPassword, password }, ctx) => {\n\t\tif (confirmPassword !== password) {\n\t\t\tctx.addIssue({\n\t\t\t\tpath: ['confirmPassword'],\n\t\t\t\tcode: 'custom',\n\t\t\t\tmessage: 'The passwords must match',\n\t\t\t})\n\t\t}\n\t})\n"],"names":["USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","UsernameSchema","z.string","value","PasswordSchema","val","NameSchema","EmailSchema","PasswordAndConfirmPasswordSchema","z.object","confirmPassword","password","ctx"],"mappings":"+CAEO,MAAMA,EAAsB,EACtBC,EAAsB,GAEtBC,EAAiBC,EACrB,CAAE,eAAgB,sBAAA,CAAwB,EACjD,IAAIH,EAAqB,CAAE,QAAS,uBAAA,CAAyB,EAC7D,IAAIC,EAAqB,CAAE,QAAS,uBAAwB,EAC5D,MAAM,kBAAmB,CACzB,QAAS,6DACV,CAAC,EAEA,UAAWG,GAAUA,EAAM,aAAa,EAE7BC,EAAiBF,EACrB,CAAE,eAAgB,uBAAwB,EACjD,IAAI,EAAG,CAAE,QAAS,wBAAyB,EAG3C,OAAQG,GAAQ,IAAI,YAAA,EAAc,OAAOA,CAAG,EAAE,QAAU,GAAI,CAC5D,QAAS,sBACV,CAAC,EAEWC,EAAaJ,EACjB,CAAE,eAAgB,kBAAA,CAAoB,EAC7C,IAAI,EAAG,CAAE,QAAS,mBAAA,CAAqB,EACvC,IAAI,GAAI,CAAE,QAAS,mBAAoB,EAE5BK,EAAcL,EAClB,CAAE,eAAgB,mBAAA,CAAqB,EAC9C,MAAM,CAAE,QAAS,kBAAA,CAAoB,EACrC,IAAI,EAAG,CAAE,QAAS,qBAAsB,EACxC,IAAI,IAAK,CAAE,QAAS,mBAAA,CAAqB,EAEzC,UAAWC,GAAUA,EAAM,aAAa,EAE7BK,EAAmCC,EACvC,CAAE,SAAUL,EAAgB,gBAAiBA,EAAgB,EACpE,YAAY,CAAC,CAAE,gBAAAM,EAAiB,SAAAC,CAAA,EAAYC,IAAQ,CAChDF,IAAoBC,GACvBC,EAAI,SAAS,CACZ,KAAM,CAAC,iBAAiB,EACxB,KAAM,SACN,QAAS,0BAAA,CACT,CAEH,CAAC"}