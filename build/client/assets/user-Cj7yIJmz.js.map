{"version":3,"file":"user-Cj7yIJmz.js","sources":["../../../app/utils/user.ts"],"sourcesContent":["import { useRouteLoaderData } from 'react-router'\nimport { type loader as rootLoader } from '#app/root.tsx'\n\nfunction isUser(\n\tuser: any,\n): user is Awaited<ReturnType<typeof rootLoader>>['data']['user'] {\n\treturn user && typeof user === 'object' && typeof user.id === 'string'\n}\n\nexport function useOptionalUser() {\n\tconst data = useRouteLoaderData<typeof rootLoader>('root')\n\tif (!data || !isUser(data.user)) {\n\t\treturn undefined\n\t}\n\treturn data.user\n}\n\nexport function useUser() {\n\tconst maybeUser = useOptionalUser()\n\tif (!maybeUser) {\n\t\tthrow new Error(\n\t\t\t'No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead.',\n\t\t)\n\t}\n\treturn maybeUser\n}\n\ntype Action = 'create' | 'read' | 'update' | 'delete'\ntype Entity = 'user' | 'note'\ntype Access = 'own' | 'any' | 'own,any' | 'any,own'\nexport type PermissionString =\n\t| `${Action}:${Entity}`\n\t| `${Action}:${Entity}:${Access}`\n\nexport function parsePermissionString(permissionString: PermissionString) {\n\tconst [action, entity, access] = permissionString.split(':') as [\n\t\tAction,\n\t\tEntity,\n\t\tAccess | undefined,\n\t]\n\treturn {\n\t\taction,\n\t\tentity,\n\t\taccess: access ? (access.split(',') as Array<Access>) : undefined,\n\t}\n}\n\nexport function userHasPermission(\n\tuser: Pick<ReturnType<typeof useUser>, 'roles'> | null | undefined,\n\tpermission: PermissionString,\n) {\n\tif (!user) return false\n\tconst { action, entity, access } = parsePermissionString(permission)\n\treturn user.roles.some((role) =>\n\t\trole.permissions.some(\n\t\t\t(permission) =>\n\t\t\t\tpermission.entity === entity &&\n\t\t\t\tpermission.action === action &&\n\t\t\t\t(!access || access.includes(permission.access)),\n\t\t),\n\t)\n}\n\nexport function userHasRole(\n\tuser: Pick<ReturnType<typeof useUser>, 'roles'> | null,\n\trole: string,\n) {\n\tif (!user) return false\n\treturn user.roles.some((r) => r.name === role)\n}\n"],"names":["isUser","user","useOptionalUser","data","useRouteLoaderData","useUser","maybeUser","parsePermissionString","permissionString","action","entity","access","userHasPermission","permission","role"],"mappings":"iDAGA,SAASA,EACRC,EACiE,CACjE,OAAOA,GAAQ,OAAOA,GAAS,UAAY,OAAOA,EAAK,IAAO,QAC/D,CAEO,SAASC,GAAkB,CACjC,MAAMC,EAAOC,EAAsC,MAAM,EACzD,GAAI,GAACD,GAAQ,CAACH,EAAOG,EAAK,IAAI,GAG9B,OAAOA,EAAK,IACb,CAEO,SAASE,GAAU,CACzB,MAAMC,EAAYJ,EAAA,EAClB,GAAI,CAACI,EACJ,MAAM,IAAI,MACT,kHAAA,EAGF,OAAOA,CACR,CASO,SAASC,EAAsBC,EAAoC,CACzE,KAAM,CAACC,EAAQC,EAAQC,CAAM,EAAIH,EAAiB,MAAM,GAAG,EAK3D,MAAO,CACN,OAAAC,EACA,OAAAC,EACA,OAAQC,EAAUA,EAAO,MAAM,GAAG,EAAsB,MAAA,CAE1D,CAEO,SAASC,EACfX,EACAY,EACC,CACD,GAAI,CAACZ,EAAM,MAAO,GAClB,KAAM,CAAE,OAAAQ,EAAQ,OAAAC,EAAQ,OAAAC,CAAA,EAAWJ,EAAsBM,CAAU,EACnE,OAAOZ,EAAK,MAAM,KAAMa,GACvBA,EAAK,YAAY,KACfD,GACAA,EAAW,SAAWH,GACtBG,EAAW,SAAWJ,IACrB,CAACE,GAAUA,EAAO,SAASE,EAAW,MAAM,EAAA,CAC/C,CAEF"}