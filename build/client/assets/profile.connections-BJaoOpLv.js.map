{"version":3,"file":"profile.connections-BJaoOpLv.js","sources":["../../../app/routes/settings+/profile.connections.tsx"],"sourcesContent":["import { invariantResponse } from '@epic-web/invariant'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { useState } from 'react'\nimport { data, useFetcher } from 'react-router'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipProvider,\n\tTooltipTrigger,\n} from '#app/components/ui/tooltip.tsx'\nimport { requireUserId } from '#app/utils/auth.server.ts'\nimport { resolveConnectionData } from '#app/utils/connections.server.ts'\nimport {\n\tProviderConnectionForm,\n\ttype ProviderName,\n\tProviderNameSchema,\n\tproviderIcons,\n\tproviderNames,\n} from '#app/utils/connections.tsx'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { pipeHeaders } from '#app/utils/headers.server.js'\nimport { makeTimings } from '#app/utils/timing.server.ts'\nimport { createToastHeaders } from '#app/utils/toast.server.ts'\nimport { type Route } from './+types/profile.connections.ts'\nimport { type BreadcrumbHandle } from './profile.tsx'\n\nexport const handle: BreadcrumbHandle & SEOHandle = {\n\tbreadcrumb: <Icon name=\"link-2\">Connections</Icon>,\n\tgetSitemapEntries: () => null,\n}\n\nasync function userCanDeleteConnections(userId: string) {\n\tconst user = await prisma.user.findUnique({\n\t\tselect: {\n\t\t\tpassword: { select: { userId: true } },\n\t\t\t_count: { select: { connections: true } },\n\t\t},\n\t\twhere: { id: userId },\n\t})\n\t// user can delete their connections if they have a password\n\tif (user?.password) return true\n\t// users have to have more than one remaining connection to delete one\n\treturn Boolean(user?._count.connections && user?._count.connections > 1)\n}\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\tconst userId = await requireUserId(request)\n\tconst timings = makeTimings('profile connections loader')\n\tconst rawConnections = await prisma.connection.findMany({\n\t\tselect: { id: true, providerName: true, providerId: true, createdAt: true },\n\t\twhere: { userId },\n\t})\n\tconst connections: Array<{\n\t\tproviderName: ProviderName\n\t\tid: string\n\t\tdisplayName: string\n\t\tlink?: string | null\n\t\tcreatedAtFormatted: string\n\t}> = []\n\tfor (const connection of rawConnections) {\n\t\tconst r = ProviderNameSchema.safeParse(connection.providerName)\n\t\tif (!r.success) continue\n\t\tconst providerName = r.data\n\t\tconst connectionData = await resolveConnectionData(\n\t\t\tproviderName,\n\t\t\tconnection.providerId,\n\t\t\t{ timings },\n\t\t)\n\t\tconnections.push({\n\t\t\t...connectionData,\n\t\t\tproviderName,\n\t\t\tid: connection.id,\n\t\t\tcreatedAtFormatted: connection.createdAt.toLocaleString(),\n\t\t})\n\t}\n\n\treturn data(\n\t\t{\n\t\t\tconnections,\n\t\t\tcanDeleteConnections: await userCanDeleteConnections(userId),\n\t\t},\n\t\t{ headers: { 'Server-Timing': timings.toString() } },\n\t)\n}\n\nexport const headers: Route.HeadersFunction = pipeHeaders\n\nexport async function action({ request }: Route.ActionArgs) {\n\tconst userId = await requireUserId(request)\n\tconst formData = await request.formData()\n\tinvariantResponse(\n\t\tformData.get('intent') === 'delete-connection',\n\t\t'Invalid intent',\n\t)\n\tinvariantResponse(\n\t\tawait userCanDeleteConnections(userId),\n\t\t'You cannot delete your last connection unless you have a password.',\n\t)\n\tconst connectionId = formData.get('connectionId')\n\tinvariantResponse(typeof connectionId === 'string', 'Invalid connectionId')\n\tawait prisma.connection.delete({\n\t\twhere: {\n\t\t\tid: connectionId,\n\t\t\tuserId: userId,\n\t\t},\n\t})\n\tconst toastHeaders = await createToastHeaders({\n\t\ttitle: 'Deleted',\n\t\tdescription: 'Your connection has been deleted.',\n\t})\n\treturn data({ status: 'success' } as const, { headers: toastHeaders })\n}\n\nexport default function Connections({ loaderData }: Route.ComponentProps) {\n\treturn (\n\t\t<div className=\"mx-auto max-w-md\">\n\t\t\t{loaderData.connections.length ? (\n\t\t\t\t<div className=\"flex flex-col gap-2\">\n\t\t\t\t\t<p>Here are your current connections:</p>\n\t\t\t\t\t<ul className=\"flex flex-col gap-4\">\n\t\t\t\t\t\t{loaderData.connections.map((c) => (\n\t\t\t\t\t\t\t<li key={c.id}>\n\t\t\t\t\t\t\t\t<Connection\n\t\t\t\t\t\t\t\t\tconnection={c}\n\t\t\t\t\t\t\t\t\tcanDelete={loaderData.canDeleteConnections}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<p>You don't have any connections yet.</p>\n\t\t\t)}\n\t\t\t<div className=\"border-border mt-5 flex flex-col gap-5 border-t-2 border-b-2 py-3\">\n\t\t\t\t{providerNames.map((providerName) => (\n\t\t\t\t\t<ProviderConnectionForm\n\t\t\t\t\t\tkey={providerName}\n\t\t\t\t\t\ttype=\"Connect\"\n\t\t\t\t\t\tproviderName={providerName}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nfunction Connection({\n\tconnection,\n\tcanDelete,\n}: {\n\tconnection: Route.ComponentProps['loaderData']['connections'][number]\n\tcanDelete: boolean\n}) {\n\tconst deleteFetcher = useFetcher<typeof action>()\n\tconst [infoOpen, setInfoOpen] = useState(false)\n\tconst icon = providerIcons[connection.providerName]\n\treturn (\n\t\t<div className=\"flex justify-between gap-2\">\n\t\t\t<span className={`inline-flex items-center gap-1.5`}>\n\t\t\t\t{icon}\n\t\t\t\t<span>\n\t\t\t\t\t{connection.link ? (\n\t\t\t\t\t\t<a href={connection.link} className=\"underline\">\n\t\t\t\t\t\t\t{connection.displayName}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tconnection.displayName\n\t\t\t\t\t)}{' '}\n\t\t\t\t\t({connection.createdAtFormatted})\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t\t{canDelete ? (\n\t\t\t\t<deleteFetcher.Form method=\"POST\">\n\t\t\t\t\t<input name=\"connectionId\" value={connection.id} type=\"hidden\" />\n\t\t\t\t\t<TooltipProvider>\n\t\t\t\t\t\t<Tooltip>\n\t\t\t\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\t\t\tname=\"intent\"\n\t\t\t\t\t\t\t\t\tvalue=\"delete-connection\"\n\t\t\t\t\t\t\t\t\tvariant=\"destructive\"\n\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\tstatus={\n\t\t\t\t\t\t\t\t\t\tdeleteFetcher.state !== 'idle'\n\t\t\t\t\t\t\t\t\t\t\t? 'pending'\n\t\t\t\t\t\t\t\t\t\t\t: (deleteFetcher.data?.status ?? 'idle')\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Icon name=\"cross-1\" />\n\t\t\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t\t<TooltipContent>Disconnect this account</TooltipContent>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t</TooltipProvider>\n\t\t\t\t</deleteFetcher.Form>\n\t\t\t) : (\n\t\t\t\t<TooltipProvider>\n\t\t\t\t\t<Tooltip open={infoOpen} onOpenChange={setInfoOpen}>\n\t\t\t\t\t\t<TooltipTrigger onClick={() => setInfoOpen(true)}>\n\t\t\t\t\t\t\t<Icon name=\"question-mark-circled\"></Icon>\n\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t<TooltipContent>\n\t\t\t\t\t\t\tYou cannot delete your last connection unless you have a password.\n\t\t\t\t\t\t</TooltipContent>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t</TooltipProvider>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n"],"names":["handle","breadcrumb","jsx","Icon","name","children","getSitemapEntries","profile_connections","_UNSAFE_withComponentProps","loaderData","jsxs","className","connections","length","map","c","Connection","connection","canDelete","canDeleteConnections","id","providerNames","providerName","ProviderConnectionForm","type","deleteFetcher","useFetcher","infoOpen","setInfoOpen","useState","icon","providerIcons","link","href","displayName","createdAtFormatted","Form","method","value","TooltipProvider","Tooltip","TooltipTrigger","asChild","StatusButton","variant","size","status","state","data","TooltipContent","open","onOpenChange","onClick"],"mappings":"2bA4BO,MAAMA,EAAuC,CACnDC,WAAYC,EAAAA,IAACC,EAAA,CAAKC,KAAK,SAASC,SAAA,aAAA,CAAW,EAC3CC,kBAAmBA,IAAM,IAC1B,EAoFAC,EAAAC,EAAA,SAAoC,CAAEC,WAAAA,CAAW,EAAyB,CACzE,OACCC,EAAAA,KAAC,MAAA,CAAIC,UAAU,mBACbN,SAAA,CAAAI,EAAWG,YAAYC,OACvBH,EAAAA,KAAC,MAAA,CAAIC,UAAU,sBACdN,SAAA,CAAAH,EAAAA,IAAC,KAAEG,SAAA,oCAAA,CAAkC,EACrCH,EAAAA,IAAC,KAAA,CAAGS,UAAU,sBACZN,SAAAI,EAAWG,YAAYE,IAAKC,GAC5Bb,EAAAA,IAAC,KAAA,CACAG,SAAAH,EAAAA,IAACc,EAAA,CACAC,WAAYF,EACZG,UAAWT,EAAWU,qBACvB,CAAA,EAJQJ,EAAEK,EAKX,CACA,CAAA,CACF,CAAA,CAAA,CACD,EAEAlB,EAAAA,IAAC,IAAA,CAAEG,SAAA,qCAAA,CAAmC,QAEtC,MAAA,CAAIM,UAAU,oEACbN,SAAAgB,EAAcP,IAAKQ,GACnBpB,EAAAA,IAACqB,EAAA,CAEAC,KAAK,UACLF,aAAAA,GAFKA,CAGN,CACA,CAAA,CACF,CAAA,CAAA,CACD,CAEF,CAAA,EAEA,SAASN,EAAW,CACnBC,WAAAA,EACAC,UAAAA,CACD,EAGG,CACF,MAAMO,EAAgBC,EAAA,EAChB,CAACC,EAAUC,CAAW,EAAIC,EAAAA,SAAS,EAAK,EACxCC,EAAOC,EAAcd,EAAWK,YAAY,EAClD,OACCZ,EAAAA,KAAC,MAAA,CAAIC,UAAU,6BACdN,SAAA,CAAAK,EAAAA,KAAC,OAAA,CAAKC,UAAW,mCACfN,SAAA,CAAAyB,SACA,OAAA,CACCzB,SAAA,CAAAY,EAAWe,KACX9B,EAAAA,IAAC,IAAA,CAAE+B,KAAMhB,EAAWe,KAAMrB,UAAU,YAClCN,SAAAY,EAAWiB,WAAA,CACb,EAEAjB,EAAWiB,YACT,IAAI,IACLjB,EAAWkB,mBAAmB,GAAA,CAAA,CACjC,CAAA,EACD,EACCjB,EACAR,OAACe,EAAcW,KAAd,CAAmBC,OAAO,OAC1BhC,SAAA,CAAAH,EAAAA,IAAC,SAAME,KAAK,eAAekC,MAAOrB,EAAWG,GAAII,KAAK,QAAA,CAAS,EAC/DtB,EAAAA,IAACqC,EAAA,CACAlC,SAAAK,EAAAA,KAAC8B,EAAA,CACAnC,SAAA,CAAAH,EAAAA,IAACuC,EAAA,CAAeC,QAAO,GACtBrC,SAAAH,EAAAA,IAACyC,EAAA,CACAvC,KAAK,SACLkC,MAAM,oBACNM,QAAQ,cACRC,KAAK,KACLC,OACCrB,EAAcsB,QAAU,OACrB,UACCtB,EAAcuB,MAAMF,QAAU,OAGnCzC,SAAAH,EAAAA,IAACC,EAAA,CAAKC,KAAK,UAAU,EACtB,CAAA,CACD,EACAF,EAAAA,IAAC+C,GAAe5C,SAAA,yBAAA,CAAuB,CAAA,EACxC,CAAA,CACD,CAAA,CAAA,CACD,QAECkC,EAAA,CACAlC,SAAAK,EAAAA,KAAC8B,GAAQU,KAAMvB,EAAUwB,aAAcvB,EACtCvB,SAAA,CAAAH,EAAAA,IAACuC,EAAA,CAAeW,QAASA,IAAMxB,EAAY,EAAI,EAC9CvB,SAAAH,EAAAA,IAACC,EAAA,CAAKC,KAAK,wBAAwB,CAAA,CACpC,EACAF,EAAAA,IAAC+C,GAAe5C,SAAA,oEAAA,CAEhB,CAAA,EACD,CAAA,CACD,CAAA,CAAA,CAEF,CAEF"}