{"version":3,"file":"signup-_QgbTJr6.js","sources":["../../../app/routes/_auth+/signup.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport * as E from '@react-email/components'\nimport { data, redirect, Form, useSearchParams } from 'react-router'\nimport { HoneypotInputs } from 'remix-utils/honeypot/react'\nimport { z } from 'zod'\nimport { GeneralErrorBoundary } from '#app/components/error-boundary.tsx'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport { requireAnonymous } from '#app/utils/auth.server.ts'\nimport {\n\tProviderConnectionForm,\n\tproviderNames,\n} from '#app/utils/connections.tsx'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { sendEmail } from '#app/utils/email.server.ts'\nimport { checkHoneypot } from '#app/utils/honeypot.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { EmailSchema } from '#app/utils/user-validation.ts'\nimport { type Route } from './+types/signup.ts'\nimport { prepareVerification } from './verify.server.ts'\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: () => null,\n}\n\nconst SignupSchema = z.object({\n\temail: EmailSchema,\n})\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\tawait requireAnonymous(request)\n\treturn null\n}\n\nexport async function action({ request }: Route.ActionArgs) {\n\tconst formData = await request.formData()\n\n\tawait checkHoneypot(formData)\n\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: SignupSchema.superRefine(async (data, ctx) => {\n\t\t\tconst existingUser = await prisma.user.findUnique({\n\t\t\t\twhere: { email: data.email },\n\t\t\t\tselect: { id: true },\n\t\t\t})\n\t\t\tif (existingUser) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['email'],\n\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\tmessage: 'A user already exists with this email',\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}),\n\t\tasync: true,\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn data(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\tconst { email } = submission.value\n\tconst { verifyUrl, redirectTo, otp } = await prepareVerification({\n\t\tperiod: 10 * 60,\n\t\trequest,\n\t\ttype: 'onboarding',\n\t\ttarget: email,\n\t})\n\n\tconst response = await sendEmail({\n\t\tto: email,\n\t\tsubject: `Welcome to Epic Notes!`,\n\t\treact: <SignupEmail onboardingUrl={verifyUrl.toString()} otp={otp} />,\n\t})\n\n\tif (response.status === 'success') {\n\t\treturn redirect(redirectTo.toString())\n\t} else {\n\t\treturn data(\n\t\t\t{\n\t\t\t\tresult: submission.reply({ formErrors: [response.error.message] }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tstatus: 500,\n\t\t\t},\n\t\t)\n\t}\n}\n\nexport function SignupEmail({\n\tonboardingUrl,\n\totp,\n}: {\n\tonboardingUrl: string\n\totp: string\n}) {\n\treturn (\n\t\t<E.Html lang=\"en\" dir=\"ltr\">\n\t\t\t<E.Container>\n\t\t\t\t<h1>\n\t\t\t\t\t<E.Text>Welcome to Epic Notes!</E.Text>\n\t\t\t\t</h1>\n\t\t\t\t<p>\n\t\t\t\t\t<E.Text>\n\t\t\t\t\t\tHere's your verification code: <strong>{otp}</strong>\n\t\t\t\t\t</E.Text>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<E.Text>Or click the link to get started:</E.Text>\n\t\t\t\t</p>\n\t\t\t\t<E.Link href={onboardingUrl}>{onboardingUrl}</E.Link>\n\t\t\t</E.Container>\n\t\t</E.Html>\n\t)\n}\n\nexport const meta: Route.MetaFunction = () => {\n\treturn [{ title: 'Sign Up | Epic Notes' }]\n}\n\nexport default function SignupRoute({ actionData }: Route.ComponentProps) {\n\tconst isPending = useIsPending()\n\tconst [searchParams] = useSearchParams()\n\tconst redirectTo = searchParams.get('redirectTo')\n\n\tconst [form, fields] = useForm({\n\t\tid: 'signup-form',\n\t\tconstraint: getZodConstraint(SignupSchema),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\tconst result = parseWithZod(formData, { schema: SignupSchema })\n\t\t\treturn result\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<div className=\"container flex flex-col justify-center pt-20 pb-32\">\n\t\t\t<div className=\"text-center\">\n\t\t\t\t<h1 className=\"text-h1\">Let's start your journey!</h1>\n\t\t\t\t<p className=\"text-body-md text-muted-foreground mt-3\">\n\t\t\t\t\tPlease enter your email.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div className=\"mx-auto mt-16 max-w-sm min-w-full sm:min-w-[368px]\">\n\t\t\t\t<Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t\t\t<HoneypotInputs />\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.email.id,\n\t\t\t\t\t\t\tchildren: 'Email',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.email, { type: 'email' }),\n\t\t\t\t\t\t\tautoFocus: true,\n\t\t\t\t\t\t\tautoComplete: 'email',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.email.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\t\t\t\t\t<StatusButton\n\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\tstatus={isPending ? 'pending' : (form.status ?? 'idle')}\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</StatusButton>\n\t\t\t\t</Form>\n\t\t\t\t<ul className=\"flex flex-col gap-4 py-4\">\n\t\t\t\t\t{providerNames.map((providerName) => (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t<li key={providerName}>\n\t\t\t\t\t\t\t\t<ProviderConnectionForm\n\t\t\t\t\t\t\t\t\ttype=\"Signup\"\n\t\t\t\t\t\t\t\t\tproviderName={providerName}\n\t\t\t\t\t\t\t\t\tredirectTo={redirectTo}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport function ErrorBoundary() {\n\treturn <GeneralErrorBoundary />\n}\n"],"names":["handle","getSitemapEntries","SignupSchema","z","email","EmailSchema","meta","title","signup","_UNSAFE_withComponentProps","actionData","isPending","useIsPending","searchParams","useSearchParams","redirectTo","get","form","fields","useForm","id","constraint","getZodConstraint","lastResult","result","onValidate","formData","parseWithZod","schema","shouldRevalidate","jsxs","className","children","jsx","Form","method","getFormProps","HoneypotInputs","Field","labelProps","htmlFor","inputProps","getInputProps","type","autoFocus","autoComplete","errors","ErrorList","errorId","StatusButton","status","disabled","map","providerName","Fragment","ProviderConnectionForm","ErrorBoundary","_UNSAFE_withErrorBoundaryProps","GeneralErrorBoundary"],"mappings":"4yBAuBO,MAAMA,EAAoB,CAChCC,kBAAmBA,IAAM,IAC1B,EAEMC,EAAeC,EAAS,CAC7BC,MAAOC,CACR,CAAC,EA0FYC,EAA2BA,IAChC,CAAC,CAAEC,MAAO,sBAAuB,CAAC,EAG1CC,EAAAC,EAAA,SAAoC,CAAEC,WAAAA,CAAW,EAAyB,CACzE,MAAMC,EAAYC,EAAA,EACZ,CAACC,CAAY,EAAIC,EAAA,EACjBC,EAAaF,EAAaG,IAAI,YAAY,EAE1C,CAACC,EAAMC,CAAM,EAAIC,EAAQ,CAC9BC,GAAI,cACJC,WAAYC,EAAiBpB,CAAY,EACzCqB,WAAYb,GAAYc,OACxBC,WAAW,CAAEC,SAAAA,CAAS,EAAG,CAExB,OADeC,EAAaD,EAAU,CAAEE,OAAQ1B,CAAa,CAAC,GAG/D2B,iBAAkB,QACnB,CAAC,EAED,OACCC,EAAAA,KAAC,MAAA,CAAIC,UAAU,qDACdC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACdC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,UAAUC,SAAA,2BAAA,CAAyB,EACjDC,EAAAA,IAAC,IAAA,CAAEF,UAAU,0CAA0CC,SAAA,0BAAA,CAEvD,CAAA,CAAA,CACD,EACAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,qDACdC,SAAA,CAAAF,EAAAA,KAACI,GAAKC,OAAO,OAAQ,GAAGC,EAAanB,CAAI,EACxCe,SAAA,CAAAC,EAAAA,IAACI,EAAA,CAAA,CAAe,EAChBJ,EAAAA,IAACK,EAAA,CACAC,WAAY,CACXC,QAAStB,EAAOd,MAAMgB,GACtBY,SAAU,SAEXS,WAAY,CACX,GAAGC,EAAcxB,EAAOd,MAAO,CAAEuC,KAAM,OAAQ,CAAC,EAChDC,UAAW,GACXC,aAAc,SAEfC,OAAQ5B,EAAOd,MAAM0C,MAAA,CACtB,QACCC,EAAA,CAAUD,OAAQ7B,EAAK6B,OAAQ1B,GAAIH,EAAK+B,OAAA,CAAS,EAClDf,EAAAA,IAACgB,EAAA,CACAlB,UAAU,SACVmB,OAAQvC,EAAY,UAAaM,EAAKiC,QAAU,OAChDP,KAAK,SACLQ,SAAUxC,EACVqB,SAAA,QAAA,CAED,CAAA,CAAA,CACD,EACAC,EAAAA,IAAC,MAAGF,UAAU,2BACZC,WAAcoB,IAAKC,GACnBvB,EAAAA,KAAAwB,EAAAA,SAAA,CACCtB,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAA,CAAG,QACH,KAAA,CACAD,SAAAC,EAAAA,IAACsB,EAAA,CACAZ,KAAK,SACLU,aAAAA,EACAtC,WAAAA,EACD,GALQsC,CAMT,CAAA,CAAA,CACD,CACA,CAAA,CACF,CAAA,CAAA,CACD,CAAA,CAAA,CACD,CAEF,CAAA,EAEOG,EAAAC,EAAA,UAAyB,CAC/B,aAAQC,EAAA,EAAqB,CAC9B,CAAA"}