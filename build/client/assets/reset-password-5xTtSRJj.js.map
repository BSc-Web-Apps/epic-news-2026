{"version":3,"file":"reset-password-5xTtSRJj.js","sources":["../../../app/routes/_auth+/reset-password.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { data, redirect, Form } from 'react-router'\nimport { GeneralErrorBoundary } from '#app/components/error-boundary.tsx'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tcheckIsCommonPassword,\n\trequireAnonymous,\n\tresetUserPassword,\n} from '#app/utils/auth.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { PasswordAndConfirmPasswordSchema } from '#app/utils/user-validation.ts'\nimport { verifySessionStorage } from '#app/utils/verification.server.ts'\nimport { type Route } from './+types/reset-password.ts'\n\nexport const handle: SEOHandle = {\n\tgetSitemapEntries: () => null,\n}\n\nexport const resetPasswordUsernameSessionKey = 'resetPasswordUsername'\n\nconst ResetPasswordSchema = PasswordAndConfirmPasswordSchema\n\nasync function requireResetPasswordUsername(request: Request) {\n\tawait requireAnonymous(request)\n\tconst verifySession = await verifySessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst resetPasswordUsername = verifySession.get(\n\t\tresetPasswordUsernameSessionKey,\n\t)\n\tif (typeof resetPasswordUsername !== 'string' || !resetPasswordUsername) {\n\t\tthrow redirect('/login')\n\t}\n\treturn resetPasswordUsername\n}\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\tconst resetPasswordUsername = await requireResetPasswordUsername(request)\n\treturn { resetPasswordUsername }\n}\n\nexport async function action({ request }: Route.ActionArgs) {\n\tconst resetPasswordUsername = await requireResetPasswordUsername(request)\n\tconst formData = await request.formData()\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: ResetPasswordSchema.superRefine(async ({ password }, ctx) => {\n\t\t\tconst isCommonPassword = await checkIsCommonPassword(password)\n\t\t\tif (isCommonPassword) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['password'],\n\t\t\t\t\tcode: 'custom',\n\t\t\t\t\tmessage: 'Password is too common',\n\t\t\t\t})\n\t\t\t}\n\t\t}),\n\t\tasync: true,\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn data(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\tconst { password } = submission.value\n\n\tawait resetUserPassword({ username: resetPasswordUsername, password })\n\tconst verifySession = await verifySessionStorage.getSession()\n\treturn redirect('/login', {\n\t\theaders: {\n\t\t\t'set-cookie': await verifySessionStorage.destroySession(verifySession),\n\t\t},\n\t})\n}\n\nexport const meta: Route.MetaFunction = () => {\n\treturn [{ title: 'Reset Password | Epic Notes' }]\n}\n\nexport default function ResetPasswordPage({\n\tloaderData,\n\tactionData,\n}: Route.ComponentProps) {\n\tconst isPending = useIsPending()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'reset-password',\n\t\tconstraint: getZodConstraint(ResetPasswordSchema),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ResetPasswordSchema })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<div className=\"container flex flex-col justify-center pt-20 pb-32\">\n\t\t\t<div className=\"text-center\">\n\t\t\t\t<h1 className=\"text-h1\">Password Reset</h1>\n\t\t\t\t<p className=\"text-body-md text-muted-foreground mt-3\">\n\t\t\t\t\tHi, {loaderData.resetPasswordUsername}. No worries. It happens all the\n\t\t\t\t\ttime.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div className=\"mx-auto mt-16 max-w-sm min-w-full sm:min-w-[368px]\">\n\t\t\t\t<Form method=\"POST\" {...getFormProps(form)}>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.password.id,\n\t\t\t\t\t\t\tchildren: 'New Password',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.password, { type: 'password' }),\n\t\t\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t\t\t\tautoFocus: true,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.password.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.confirmPassword.id,\n\t\t\t\t\t\t\tchildren: 'Confirm Password',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.confirmPassword, { type: 'password' }),\n\t\t\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.confirmPassword.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t<StatusButton\n\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\tstatus={isPending ? 'pending' : (form.status ?? 'idle')}\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t>\n\t\t\t\t\t\tReset password\n\t\t\t\t\t</StatusButton>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport function ErrorBoundary() {\n\treturn <GeneralErrorBoundary />\n}\n"],"names":["handle","getSitemapEntries","ResetPasswordSchema","PasswordAndConfirmPasswordSchema","meta","title","resetPassword","_UNSAFE_withComponentProps","loaderData","actionData","isPending","useIsPending","form","fields","useForm","id","constraint","getZodConstraint","lastResult","result","onValidate","formData","parseWithZod","schema","shouldRevalidate","jsxs","className","children","jsx","resetPasswordUsername","Form","method","getFormProps","Field","labelProps","htmlFor","password","inputProps","getInputProps","type","autoComplete","autoFocus","errors","confirmPassword","ErrorList","errorId","StatusButton","status","disabled","ErrorBoundary","_UNSAFE_withErrorBoundaryProps","GeneralErrorBoundary"],"mappings":"orBAiBO,MAAMA,EAAoB,CAChCC,kBAAmBA,IAAM,IAC1B,EAIMC,EAAsBC,EAsDfC,EAA2BA,IAChC,CAAC,CAAEC,MAAO,6BAA8B,CAAC,EAGjDC,EAAAC,EAAA,SAA0C,CACzCC,WAAAA,EACAC,WAAAA,CACD,EAAyB,CACxB,MAAMC,EAAYC,EAAA,EAEZ,CAACC,EAAMC,CAAM,EAAIC,EAAQ,CAC9BC,GAAI,iBACJC,WAAYC,EAAiBf,CAAmB,EAChDgB,WAAYT,GAAYU,OACxBC,WAAW,CAAEC,SAAAA,CAAS,EAAG,CACxB,OAAOC,EAAaD,EAAU,CAAEE,OAAQrB,CAAoB,CAAC,GAE9DsB,iBAAkB,QACnB,CAAC,EAED,OACCC,EAAAA,KAAC,MAAA,CAAIC,UAAU,qDACdC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,cACdC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,UAAUC,SAAA,gBAAA,CAAc,EACtCF,EAAAA,KAAC,IAAA,CAAEC,UAAU,0CAA0CC,SAAA,CAAA,OACjDnB,EAAWqB,sBAAsB,wCAAA,CAAA,CAEvC,CAAA,CAAA,CACD,EACAD,EAAAA,IAAC,MAAA,CAAIF,UAAU,qDACdC,SAAAF,EAAAA,KAACK,EAAA,CAAKC,OAAO,OAAQ,GAAGC,EAAapB,CAAI,EACxCe,SAAA,CAAAC,EAAAA,IAACK,EAAA,CACAC,WAAY,CACXC,QAAStB,EAAOuB,SAASrB,GACzBY,SAAU,gBAEXU,WAAY,CACX,GAAGC,EAAczB,EAAOuB,SAAU,CAAEG,KAAM,UAAW,CAAC,EACtDC,aAAc,eACdC,UAAW,IAEZC,OAAQ7B,EAAOuB,SAASM,MAAA,CACzB,EACAd,EAAAA,IAACK,EAAA,CACAC,WAAY,CACXC,QAAStB,EAAO8B,gBAAgB5B,GAChCY,SAAU,oBAEXU,WAAY,CACX,GAAGC,EAAczB,EAAO8B,gBAAiB,CAAEJ,KAAM,UAAW,CAAC,EAC7DC,aAAc,gBAEfE,OAAQ7B,EAAO8B,gBAAgBD,MAAA,CAChC,QAECE,EAAA,CAAUF,OAAQ9B,EAAK8B,OAAQ3B,GAAIH,EAAKiC,OAAA,CAAS,EAElDjB,EAAAA,IAACkB,EAAA,CACApB,UAAU,SACVqB,OAAQrC,EAAY,UAAaE,EAAKmC,QAAU,OAChDR,KAAK,SACLS,SAAUtC,EACViB,SAAA,gBAAA,CAED,CAAA,EACD,CAAA,CACD,CAAA,CAAA,CACD,CAEF,CAAA,EAEOsB,EAAAC,EAAA,UAAyB,CAC/B,aAAQC,EAAA,EAAqB,CAC9B,CAAA"}