{"version":3,"file":"profile.password_.create-pUDMqJAi.js","sources":["../../../app/routes/settings+/profile.password_.create.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { data, redirect, Form, Link } from 'react-router'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Button } from '#app/components/ui/button.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tcheckIsCommonPassword,\n\tgetPasswordHash,\n\trequireUserId,\n} from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { PasswordAndConfirmPasswordSchema } from '#app/utils/user-validation.ts'\nimport { type Route } from './+types/profile.password_.create.ts'\nimport { type BreadcrumbHandle } from './profile.tsx'\n\nexport const handle: BreadcrumbHandle & SEOHandle = {\n\tbreadcrumb: <Icon name=\"dots-horizontal\">Password</Icon>,\n\tgetSitemapEntries: () => null,\n}\n\nconst CreatePasswordForm = PasswordAndConfirmPasswordSchema\n\nasync function requireNoPassword(userId: string) {\n\tconst password = await prisma.password.findUnique({\n\t\tselect: { userId: true },\n\t\twhere: { userId },\n\t})\n\tif (password) {\n\t\tthrow redirect('/settings/profile/password')\n\t}\n}\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\tconst userId = await requireUserId(request)\n\tawait requireNoPassword(userId)\n\treturn {}\n}\n\nexport async function action({ request }: Route.ActionArgs) {\n\tconst userId = await requireUserId(request)\n\tawait requireNoPassword(userId)\n\tconst formData = await request.formData()\n\tconst submission = await parseWithZod(formData, {\n\t\tasync: true,\n\t\tschema: CreatePasswordForm.superRefine(async ({ password }, ctx) => {\n\t\t\tconst isCommonPassword = await checkIsCommonPassword(password)\n\t\t\tif (isCommonPassword) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['password'],\n\t\t\t\t\tcode: 'custom',\n\t\t\t\t\tmessage: 'Password is too common',\n\t\t\t\t})\n\t\t\t}\n\t\t}),\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn data(\n\t\t\t{\n\t\t\t\tresult: submission.reply({\n\t\t\t\t\thideFields: ['password', 'confirmPassword'],\n\t\t\t\t}),\n\t\t\t},\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { password } = submission.value\n\n\tawait prisma.user.update({\n\t\tselect: { username: true },\n\t\twhere: { id: userId },\n\t\tdata: {\n\t\t\tpassword: {\n\t\t\t\tcreate: {\n\t\t\t\t\thash: await getPasswordHash(password),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\treturn redirect(`/settings/profile`, { status: 302 })\n}\n\nexport default function CreatePasswordRoute({\n\tactionData,\n}: Route.ComponentProps) {\n\tconst isPending = useIsPending()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'password-create-form',\n\t\tconstraint: getZodConstraint(CreatePasswordForm),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: CreatePasswordForm })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<Form method=\"POST\" {...getFormProps(form)} className=\"mx-auto max-w-md\">\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'New Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.password, { type: 'password' }),\n\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.password.errors}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'Confirm New Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.confirmPassword, {\n\t\t\t\t\t\ttype: 'password',\n\t\t\t\t\t}),\n\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.confirmPassword.errors}\n\t\t\t/>\n\t\t\t<ErrorList id={form.errorId} errors={form.errors} />\n\t\t\t<div className=\"grid w-full grid-cols-2 gap-6\">\n\t\t\t\t<Button variant=\"secondary\" asChild>\n\t\t\t\t\t<Link to=\"..\">Cancel</Link>\n\t\t\t\t</Button>\n\t\t\t\t<StatusButton\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tstatus={isPending ? 'pending' : (form.status ?? 'idle')}\n\t\t\t\t>\n\t\t\t\t\tCreate Password\n\t\t\t\t</StatusButton>\n\t\t\t</div>\n\t\t</Form>\n\t)\n}\n"],"names":["handle","breadcrumb","jsx","Icon","name","children","getSitemapEntries","CreatePasswordForm","PasswordAndConfirmPasswordSchema","profile_password__create","_UNSAFE_withComponentProps","actionData","isPending","useIsPending","form","fields","useForm","id","constraint","getZodConstraint","lastResult","result","onValidate","formData","parseWithZod","schema","shouldRevalidate","jsxs","Form","method","getFormProps","className","Field","labelProps","inputProps","getInputProps","password","type","autoComplete","errors","confirmPassword","ErrorList","errorId","Button","variant","asChild","Link","to","StatusButton","status"],"mappings":"ynBAmBO,MAAMA,EAAuC,CACnDC,WAAYC,EAAAA,IAACC,EAAA,CAAKC,KAAK,kBAAkBC,SAAA,UAAA,CAAQ,EACjDC,kBAAmBA,IAAM,IAC1B,EAEMC,EAAqBC,EA+D3BC,EAAAC,EAAA,SAA4C,CAC3CC,WAAAA,CACD,EAAyB,CACxB,MAAMC,EAAYC,EAAA,EAEZ,CAACC,EAAMC,CAAM,EAAIC,EAAQ,CAC9BC,GAAI,uBACJC,WAAYC,EAAiBZ,CAAkB,EAC/Ca,WAAYT,GAAYU,OACxBC,WAAW,CAAEC,SAAAA,CAAS,EAAG,CACxB,OAAOC,EAAaD,EAAU,CAAEE,OAAQlB,CAAmB,CAAC,GAE7DmB,iBAAkB,QACnB,CAAC,EAED,OACCC,EAAAA,KAACC,GAAKC,OAAO,OAAQ,GAAGC,EAAahB,CAAI,EAAGiB,UAAU,mBACrD1B,SAAA,CAAAH,EAAAA,IAAC8B,EAAA,CACAC,WAAY,CAAE5B,SAAU,gBACxB6B,WAAY,CACX,GAAGC,EAAcpB,EAAOqB,SAAU,CAAEC,KAAM,UAAW,CAAC,EACtDC,aAAc,gBAEfC,OAAQxB,EAAOqB,SAASG,MAAA,CACzB,EACArC,EAAAA,IAAC8B,EAAA,CACAC,WAAY,CAAE5B,SAAU,wBACxB6B,WAAY,CACX,GAAGC,EAAcpB,EAAOyB,gBAAiB,CACxCH,KAAM,UACP,CAAC,EACDC,aAAc,gBAEfC,OAAQxB,EAAOyB,gBAAgBD,MAAA,CAChC,QACCE,EAAA,CAAUxB,GAAIH,EAAK4B,QAASH,OAAQzB,EAAKyB,MAAA,CAAQ,EAClDZ,EAAAA,KAAC,MAAA,CAAII,UAAU,gCACd1B,SAAA,CAAAH,EAAAA,IAACyC,EAAA,CAAOC,QAAQ,YAAYC,QAAO,GAClCxC,eAACyC,EAAA,CAAKC,GAAG,KAAK1C,SAAA,SAAM,CAAA,CACrB,EACAH,EAAAA,IAAC8C,EAAA,CACAX,KAAK,SACLY,OAAQrC,EAAY,UAAaE,EAAKmC,QAAU,OAChD5C,SAAA,iBAAA,CAED,CAAA,CAAA,CACD,CAAA,CAAA,CACD,CAEF,CAAA"}