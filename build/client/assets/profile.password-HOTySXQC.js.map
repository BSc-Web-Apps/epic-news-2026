{"version":3,"file":"profile.password-HOTySXQC.js","sources":["../../../app/routes/settings+/profile.password.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { type SEOHandle } from '@nasa-gcn/remix-seo'\nimport { data, redirect, Form, Link } from 'react-router'\nimport { z } from 'zod'\nimport { ErrorList, Field } from '#app/components/forms.tsx'\nimport { Button } from '#app/components/ui/button.tsx'\nimport { Icon } from '#app/components/ui/icon.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tcheckIsCommonPassword,\n\tgetPasswordHash,\n\trequireUserId,\n\tverifyUserPassword,\n} from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport { PasswordSchema } from '#app/utils/user-validation.ts'\nimport { type Route } from './+types/profile.password.ts'\nimport { type BreadcrumbHandle } from './profile.tsx'\n\nexport const handle: BreadcrumbHandle & SEOHandle = {\n\tbreadcrumb: <Icon name=\"dots-horizontal\">Password</Icon>,\n\tgetSitemapEntries: () => null,\n}\n\nconst ChangePasswordForm = z\n\t.object({\n\t\tcurrentPassword: PasswordSchema,\n\t\tnewPassword: PasswordSchema,\n\t\tconfirmNewPassword: PasswordSchema,\n\t})\n\t.superRefine(({ confirmNewPassword, newPassword }, ctx) => {\n\t\tif (confirmNewPassword !== newPassword) {\n\t\t\tctx.addIssue({\n\t\t\t\tpath: ['confirmNewPassword'],\n\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\tmessage: 'The passwords must match',\n\t\t\t})\n\t\t}\n\t})\n\nasync function requirePassword(userId: string) {\n\tconst password = await prisma.password.findUnique({\n\t\tselect: { userId: true },\n\t\twhere: { userId },\n\t})\n\tif (!password) {\n\t\tthrow redirect('/settings/profile/password/create')\n\t}\n}\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\tconst userId = await requireUserId(request)\n\tawait requirePassword(userId)\n\treturn {}\n}\n\nexport async function action({ request }: Route.ActionArgs) {\n\tconst userId = await requireUserId(request)\n\tawait requirePassword(userId)\n\tconst formData = await request.formData()\n\tconst submission = await parseWithZod(formData, {\n\t\tasync: true,\n\t\tschema: ChangePasswordForm.superRefine(\n\t\t\tasync ({ currentPassword, newPassword }, ctx) => {\n\t\t\t\tif (currentPassword && newPassword) {\n\t\t\t\t\tconst user = await verifyUserPassword({ id: userId }, currentPassword)\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\tctx.addIssue({\n\t\t\t\t\t\t\tpath: ['currentPassword'],\n\t\t\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\t\t\tmessage: 'Incorrect password.',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tconst isCommonPassword = await checkIsCommonPassword(newPassword)\n\t\t\t\t\tif (isCommonPassword) {\n\t\t\t\t\t\tctx.addIssue({\n\t\t\t\t\t\t\tpath: ['newPassword'],\n\t\t\t\t\t\t\tcode: 'custom',\n\t\t\t\t\t\t\tmessage: 'Password is too common',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t),\n\t})\n\tif (submission.status !== 'success') {\n\t\treturn data(\n\t\t\t{\n\t\t\t\tresult: submission.reply({\n\t\t\t\t\thideFields: ['currentPassword', 'newPassword', 'confirmNewPassword'],\n\t\t\t\t}),\n\t\t\t},\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { newPassword } = submission.value\n\n\tawait prisma.user.update({\n\t\tselect: { username: true },\n\t\twhere: { id: userId },\n\t\tdata: {\n\t\t\tpassword: {\n\t\t\t\tupdate: {\n\t\t\t\t\thash: await getPasswordHash(newPassword),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\treturn redirectWithToast(\n\t\t`/settings/profile`,\n\t\t{\n\t\t\ttype: 'success',\n\t\t\ttitle: 'Password Changed',\n\t\t\tdescription: 'Your password has been changed.',\n\t\t},\n\t\t{ status: 302 },\n\t)\n}\n\nexport default function ChangePasswordRoute({\n\tactionData,\n}: Route.ComponentProps) {\n\tconst isPending = useIsPending()\n\n\tconst [form, fields] = useForm({\n\t\tid: 'password-change-form',\n\t\tconstraint: getZodConstraint(ChangePasswordForm),\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: ChangePasswordForm })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<Form method=\"POST\" {...getFormProps(form)} className=\"mx-auto max-w-md\">\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'Current Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.currentPassword, { type: 'password' }),\n\t\t\t\t\tautoComplete: 'current-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.currentPassword.errors}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'New Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.newPassword, { type: 'password' }),\n\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.newPassword.errors}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tlabelProps={{ children: 'Confirm New Password' }}\n\t\t\t\tinputProps={{\n\t\t\t\t\t...getInputProps(fields.confirmNewPassword, {\n\t\t\t\t\t\ttype: 'password',\n\t\t\t\t\t}),\n\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t}}\n\t\t\t\terrors={fields.confirmNewPassword.errors}\n\t\t\t/>\n\t\t\t<ErrorList id={form.errorId} errors={form.errors} />\n\t\t\t<div className=\"grid w-full grid-cols-2 gap-6\">\n\t\t\t\t<Button variant=\"secondary\" asChild>\n\t\t\t\t\t<Link to=\"..\">Cancel</Link>\n\t\t\t\t</Button>\n\t\t\t\t<StatusButton\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tstatus={isPending ? 'pending' : (form.status ?? 'idle')}\n\t\t\t\t>\n\t\t\t\t\tChange Password\n\t\t\t\t</StatusButton>\n\t\t\t</div>\n\t\t</Form>\n\t)\n}\n"],"names":["handle","breadcrumb","jsx","Icon","name","children","getSitemapEntries","ChangePasswordForm","z","currentPassword","PasswordSchema","newPassword","confirmNewPassword","superRefine","ctx","addIssue","path","code","custom","message","profile_password","_UNSAFE_withComponentProps","actionData","isPending","useIsPending","form","fields","useForm","id","constraint","getZodConstraint","lastResult","result","onValidate","formData","parseWithZod","schema","shouldRevalidate","jsxs","Form","method","getFormProps","className","Field","labelProps","inputProps","getInputProps","type","autoComplete","errors","ErrorList","errorId","Button","variant","asChild","Link","to","StatusButton","status"],"mappings":"ipBAsBO,MAAMA,EAAuC,CACnDC,WAAYC,EAAAA,IAACC,EAAA,CAAKC,KAAK,kBAAkBC,SAAA,UAAA,CAAQ,EACjDC,kBAAmBA,IAAM,IAC1B,EAEMC,EAAqBC,EAClB,CACPC,gBAAiBC,EACjBC,YAAaD,EACbE,mBAAoBF,CACrB,CAAC,EACAG,YAAY,CAAC,CAAED,mBAAAA,EAAoBD,YAAAA,CAAY,EAAGG,IAAQ,CACtDF,IAAuBD,GAC1BG,EAAIC,SAAS,CACZC,KAAM,CAAC,oBAAoB,EAC3BC,KAAMT,EAAeU,OACrBC,QAAS,0BACV,CAAC,CAEH,CAAC,EAmFFC,EAAAC,EAAA,SAA4C,CAC3CC,WAAAA,CACD,EAAyB,CACxB,MAAMC,EAAYC,EAAA,EAEZ,CAACC,EAAMC,CAAM,EAAIC,EAAQ,CAC9BC,GAAI,uBACJC,WAAYC,EAAiBvB,CAAkB,EAC/CwB,WAAYT,GAAYU,OACxBC,WAAW,CAAEC,SAAAA,CAAS,EAAG,CACxB,OAAOC,EAAaD,EAAU,CAAEE,OAAQ7B,CAAmB,CAAC,GAE7D8B,iBAAkB,QACnB,CAAC,EAED,OACCC,EAAAA,KAACC,GAAKC,OAAO,OAAQ,GAAGC,EAAahB,CAAI,EAAGiB,UAAU,mBACrDrC,SAAA,CAAAH,EAAAA,IAACyC,EAAA,CACAC,WAAY,CAAEvC,SAAU,oBACxBwC,WAAY,CACX,GAAGC,EAAcpB,EAAOjB,gBAAiB,CAAEsC,KAAM,UAAW,CAAC,EAC7DC,aAAc,oBAEfC,OAAQvB,EAAOjB,gBAAgBwC,MAAA,CAChC,EACA/C,EAAAA,IAACyC,EAAA,CACAC,WAAY,CAAEvC,SAAU,gBACxBwC,WAAY,CACX,GAAGC,EAAcpB,EAAOf,YAAa,CAAEoC,KAAM,UAAW,CAAC,EACzDC,aAAc,gBAEfC,OAAQvB,EAAOf,YAAYsC,MAAA,CAC5B,EACA/C,EAAAA,IAACyC,EAAA,CACAC,WAAY,CAAEvC,SAAU,wBACxBwC,WAAY,CACX,GAAGC,EAAcpB,EAAOd,mBAAoB,CAC3CmC,KAAM,UACP,CAAC,EACDC,aAAc,gBAEfC,OAAQvB,EAAOd,mBAAmBqC,MAAA,CACnC,QACCC,EAAA,CAAUtB,GAAIH,EAAK0B,QAASF,OAAQxB,EAAKwB,MAAA,CAAQ,EAClDX,EAAAA,KAAC,MAAA,CAAII,UAAU,gCACdrC,SAAA,CAAAH,EAAAA,IAACkD,EAAA,CAAOC,QAAQ,YAAYC,QAAO,GAClCjD,eAACkD,EAAA,CAAKC,GAAG,KAAKnD,SAAA,SAAM,CAAA,CACrB,EACAH,EAAAA,IAACuD,EAAA,CACAV,KAAK,SACLW,OAAQnC,EAAY,UAAaE,EAAKiC,QAAU,OAChDrD,SAAA,iBAAA,CAED,CAAA,CAAA,CACD,CAAA,CAAA,CACD,CAEF,CAAA"}