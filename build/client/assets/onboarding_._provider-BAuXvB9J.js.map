{"version":3,"file":"onboarding_._provider-BAuXvB9J.js","sources":["../../../app/routes/_auth+/onboarding_.$provider.tsx"],"sourcesContent":["import {\n\tgetFormProps,\n\tgetInputProps,\n\tuseForm,\n\ttype SubmissionResult,\n} from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport {\n\tredirect,\n\tdata,\n\ttype Params,\n\tForm,\n\tuseSearchParams,\n} from 'react-router'\nimport { safeRedirect } from 'remix-utils/safe-redirect'\nimport { z } from 'zod'\nimport { CheckboxField, ErrorList, Field } from '#app/components/forms.tsx'\nimport { Spacer } from '#app/components/spacer.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tsessionKey,\n\tsignupWithConnection,\n\trequireAnonymous,\n} from '#app/utils/auth.server.ts'\nimport { ProviderNameSchema } from '#app/utils/connections.tsx'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { authSessionStorage } from '#app/utils/session.server.ts'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport { NameSchema, UsernameSchema } from '#app/utils/user-validation.ts'\nimport { verifySessionStorage } from '#app/utils/verification.server.ts'\nimport { type Route } from './+types/onboarding_.$provider.ts'\nimport { onboardingEmailSessionKey } from './onboarding'\n\nexport const providerIdKey = 'providerId'\nexport const prefilledProfileKey = 'prefilledProfile'\n\nconst SignupFormSchema = z.object({\n\timageUrl: z.string().optional(),\n\tusername: UsernameSchema,\n\tname: NameSchema,\n\tagreeToTermsOfServiceAndPrivacyPolicy: z.boolean({\n\t\trequired_error: 'You must agree to the terms of service and privacy policy',\n\t}),\n\tremember: z.boolean().optional(),\n\tredirectTo: z.string().optional(),\n})\n\nasync function requireData({\n\trequest,\n\tparams,\n}: {\n\trequest: Request\n\tparams: Params\n}) {\n\tawait requireAnonymous(request)\n\tconst verifySession = await verifySessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst email = verifySession.get(onboardingEmailSessionKey)\n\tconst providerId = verifySession.get(providerIdKey)\n\tconst result = z\n\t\t.object({\n\t\t\temail: z.string(),\n\t\t\tproviderName: ProviderNameSchema,\n\t\t\tproviderId: z.string().or(z.number()),\n\t\t})\n\t\t.safeParse({ email, providerName: params.provider, providerId })\n\tif (result.success) {\n\t\treturn result.data\n\t} else {\n\t\tconsole.error(result.error)\n\t\tthrow redirect('/signup')\n\t}\n}\n\nexport async function loader({ request, params }: Route.LoaderArgs) {\n\tconst { email } = await requireData({ request, params })\n\n\tconst verifySession = await verifySessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst prefilledProfile = verifySession.get(prefilledProfileKey)\n\n\treturn {\n\t\temail,\n\t\tstatus: 'idle',\n\t\tsubmission: {\n\t\t\tinitialValue: prefilledProfile ?? {},\n\t\t} as SubmissionResult,\n\t}\n}\n\nexport async function action({ request, params }: Route.ActionArgs) {\n\tconst { email, providerId, providerName } = await requireData({\n\t\trequest,\n\t\tparams,\n\t})\n\tconst formData = await request.formData()\n\tconst verifySession = await verifySessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: SignupFormSchema.superRefine(async (data, ctx) => {\n\t\t\tconst existingUser = await prisma.user.findUnique({\n\t\t\t\twhere: { username: data.username },\n\t\t\t\tselect: { id: true },\n\t\t\t})\n\t\t\tif (existingUser) {\n\t\t\t\tctx.addIssue({\n\t\t\t\t\tpath: ['username'],\n\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\tmessage: 'A user already exists with this username',\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}).transform(async (data) => {\n\t\t\tconst session = await signupWithConnection({\n\t\t\t\t...data,\n\t\t\t\temail,\n\t\t\t\tproviderId: String(providerId),\n\t\t\t\tproviderName,\n\t\t\t})\n\t\t\treturn { ...data, session }\n\t\t}),\n\t\tasync: true,\n\t})\n\n\tif (submission.status !== 'success') {\n\t\treturn data(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { session, remember, redirectTo } = submission.value\n\n\tconst authSession = await authSessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tauthSession.set(sessionKey, session.id)\n\tconst headers = new Headers()\n\theaders.append(\n\t\t'set-cookie',\n\t\tawait authSessionStorage.commitSession(authSession, {\n\t\t\texpires: remember ? session.expirationDate : undefined,\n\t\t}),\n\t)\n\theaders.append(\n\t\t'set-cookie',\n\t\tawait verifySessionStorage.destroySession(verifySession),\n\t)\n\n\treturn redirectWithToast(\n\t\tsafeRedirect(redirectTo),\n\t\t{ title: 'Welcome', description: 'Thanks for signing up!' },\n\t\t{ headers },\n\t)\n}\n\nexport const meta: Route.MetaFunction = () => {\n\treturn [{ title: 'Setup Epic Notes Account' }]\n}\n\nexport default function OnboardingProviderRoute({\n\tloaderData,\n\tactionData,\n}: Route.ComponentProps) {\n\tconst isPending = useIsPending()\n\tconst [searchParams] = useSearchParams()\n\tconst redirectTo = searchParams.get('redirectTo')\n\n\tconst [form, fields] = useForm({\n\t\tid: 'onboarding-provider-form',\n\t\tconstraint: getZodConstraint(SignupFormSchema),\n\t\tlastResult: actionData?.result ?? loaderData.submission,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: SignupFormSchema })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<div className=\"container flex min-h-full flex-col justify-center pt-20 pb-32\">\n\t\t\t<div className=\"mx-auto w-full max-w-lg\">\n\t\t\t\t<div className=\"flex flex-col gap-3 text-center\">\n\t\t\t\t\t<h1 className=\"text-h1\">Welcome aboard {loaderData.email}!</h1>\n\t\t\t\t\t<p className=\"text-body-md text-muted-foreground\">\n\t\t\t\t\t\tPlease enter your details.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<Spacer size=\"xs\" />\n\t\t\t\t<Form\n\t\t\t\t\tmethod=\"POST\"\n\t\t\t\t\tclassName=\"mx-auto max-w-sm min-w-full sm:min-w-[368px]\"\n\t\t\t\t\t{...getFormProps(form)}\n\t\t\t\t>\n\t\t\t\t\t{fields.imageUrl.initialValue ? (\n\t\t\t\t\t\t<div className=\"mb-4 flex flex-col items-center justify-center gap-4\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={fields.imageUrl.initialValue}\n\t\t\t\t\t\t\t\talt=\"Profile\"\n\t\t\t\t\t\t\t\tclassName=\"size-24 rounded-full\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<p className=\"text-body-sm text-muted-foreground\">\n\t\t\t\t\t\t\t\tYou can change your photo later\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<input {...getInputProps(fields.imageUrl, { type: 'hidden' })} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ htmlFor: fields.username.id, children: 'Username' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.username, { type: 'text' }),\n\t\t\t\t\t\t\tautoComplete: 'username',\n\t\t\t\t\t\t\tclassName: 'lowercase',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.username.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ htmlFor: fields.name.id, children: 'Name' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.name, { type: 'text' }),\n\t\t\t\t\t\t\tautoComplete: 'name',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.name.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<CheckboxField\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.agreeToTermsOfServiceAndPrivacyPolicy.id,\n\t\t\t\t\t\t\tchildren:\n\t\t\t\t\t\t\t\t'Do you agree to our Terms of Service and Privacy Policy?',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tbuttonProps={getInputProps(\n\t\t\t\t\t\t\tfields.agreeToTermsOfServiceAndPrivacyPolicy,\n\t\t\t\t\t\t\t{ type: 'checkbox' },\n\t\t\t\t\t\t)}\n\t\t\t\t\t\terrors={fields.agreeToTermsOfServiceAndPrivacyPolicy.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<CheckboxField\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.remember.id,\n\t\t\t\t\t\t\tchildren: 'Remember me',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tbuttonProps={getInputProps(fields.remember, { type: 'checkbox' })}\n\t\t\t\t\t\terrors={fields.remember.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{redirectTo ? (\n\t\t\t\t\t\t<input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n\t\t\t\t\t) : null}\n\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t<div className=\"flex items-center justify-between gap-6\">\n\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\tstatus={isPending ? 'pending' : (form.status ?? 'idle')}\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate an account\n\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"],"names":["SignupFormSchema","z","imageUrl","optional","username","UsernameSchema","name","NameSchema","agreeToTermsOfServiceAndPrivacyPolicy","required_error","remember","redirectTo","meta","title","onboarding__$provider","_UNSAFE_withComponentProps","loaderData","actionData","isPending","useIsPending","searchParams","useSearchParams","get","form","fields","useForm","id","constraint","getZodConstraint","lastResult","result","submission","onValidate","formData","parseWithZod","schema","shouldRevalidate","className","children","jsxs","email","jsx","Spacer","size","Form","method","getFormProps","initialValue","src","alt","getInputProps","type","Field","labelProps","htmlFor","inputProps","autoComplete","errors","CheckboxField","buttonProps","value","ErrorList","errorId","StatusButton","status","disabled"],"mappings":"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"}