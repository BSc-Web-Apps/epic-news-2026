{"version":3,"file":"onboarding-CuGTXlS4.js","sources":["../../../app/routes/_auth+/onboarding.tsx"],"sourcesContent":["import { getFormProps, getInputProps, useForm } from '@conform-to/react'\nimport { getZodConstraint, parseWithZod } from '@conform-to/zod'\nimport { data, redirect, Form, useSearchParams } from 'react-router'\nimport { HoneypotInputs } from 'remix-utils/honeypot/react'\nimport { safeRedirect } from 'remix-utils/safe-redirect'\nimport { z } from 'zod'\nimport { CheckboxField, ErrorList, Field } from '#app/components/forms.tsx'\nimport { Spacer } from '#app/components/spacer.tsx'\nimport { StatusButton } from '#app/components/ui/status-button.tsx'\nimport {\n\tcheckIsCommonPassword,\n\trequireAnonymous,\n\tsessionKey,\n\tsignup,\n} from '#app/utils/auth.server.ts'\nimport { prisma } from '#app/utils/db.server.ts'\nimport { checkHoneypot } from '#app/utils/honeypot.server.ts'\nimport { useIsPending } from '#app/utils/misc.tsx'\nimport { authSessionStorage } from '#app/utils/session.server.ts'\nimport { redirectWithToast } from '#app/utils/toast.server.ts'\nimport {\n\tNameSchema,\n\tPasswordAndConfirmPasswordSchema,\n\tUsernameSchema,\n} from '#app/utils/user-validation.ts'\nimport { verifySessionStorage } from '#app/utils/verification.server.ts'\nimport { type Route } from './+types/onboarding.ts'\n\nexport const onboardingEmailSessionKey = 'onboardingEmail'\n\nconst SignupFormSchema = z\n\t.object({\n\t\tusername: UsernameSchema,\n\t\tname: NameSchema,\n\t\tagreeToTermsOfServiceAndPrivacyPolicy: z.boolean({\n\t\t\trequired_error:\n\t\t\t\t'You must agree to the terms of service and privacy policy',\n\t\t}),\n\t\tremember: z.boolean().optional(),\n\t\tredirectTo: z.string().optional(),\n\t})\n\t.and(PasswordAndConfirmPasswordSchema)\n\nasync function requireOnboardingEmail(request: Request) {\n\tawait requireAnonymous(request)\n\tconst verifySession = await verifySessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tconst email = verifySession.get(onboardingEmailSessionKey)\n\tif (typeof email !== 'string' || !email) {\n\t\tthrow redirect('/signup')\n\t}\n\treturn email\n}\n\nexport async function loader({ request }: Route.LoaderArgs) {\n\tconst email = await requireOnboardingEmail(request)\n\treturn { email }\n}\n\nexport async function action({ request }: Route.ActionArgs) {\n\tconst email = await requireOnboardingEmail(request)\n\tconst formData = await request.formData()\n\tawait checkHoneypot(formData)\n\tconst submission = await parseWithZod(formData, {\n\t\tschema: (intent) =>\n\t\t\tSignupFormSchema.superRefine(async (data, ctx) => {\n\t\t\t\tconst existingUser = await prisma.user.findUnique({\n\t\t\t\t\twhere: { username: data.username },\n\t\t\t\t\tselect: { id: true },\n\t\t\t\t})\n\t\t\t\tif (existingUser) {\n\t\t\t\t\tctx.addIssue({\n\t\t\t\t\t\tpath: ['username'],\n\t\t\t\t\t\tcode: z.ZodIssueCode.custom,\n\t\t\t\t\t\tmessage: 'A user already exists with this username',\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tconst isCommonPassword = await checkIsCommonPassword(data.password)\n\t\t\t\tif (isCommonPassword) {\n\t\t\t\t\tctx.addIssue({\n\t\t\t\t\t\tpath: ['password'],\n\t\t\t\t\t\tcode: 'custom',\n\t\t\t\t\t\tmessage: 'Password is too common',\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}).transform(async (data) => {\n\t\t\t\tif (intent !== null) return { ...data, session: null }\n\n\t\t\t\tconst session = await signup({ ...data, email })\n\t\t\t\treturn { ...data, session }\n\t\t\t}),\n\t\tasync: true,\n\t})\n\n\tif (submission.status !== 'success' || !submission.value.session) {\n\t\treturn data(\n\t\t\t{ result: submission.reply() },\n\t\t\t{ status: submission.status === 'error' ? 400 : 200 },\n\t\t)\n\t}\n\n\tconst { session, remember, redirectTo } = submission.value\n\n\tconst authSession = await authSessionStorage.getSession(\n\t\trequest.headers.get('cookie'),\n\t)\n\tauthSession.set(sessionKey, session.id)\n\tconst verifySession = await verifySessionStorage.getSession()\n\tconst headers = new Headers()\n\theaders.append(\n\t\t'set-cookie',\n\t\tawait authSessionStorage.commitSession(authSession, {\n\t\t\texpires: remember ? session.expirationDate : undefined,\n\t\t}),\n\t)\n\theaders.append(\n\t\t'set-cookie',\n\t\tawait verifySessionStorage.destroySession(verifySession),\n\t)\n\n\treturn redirectWithToast(\n\t\tsafeRedirect(redirectTo),\n\t\t{ title: 'Welcome', description: 'Thanks for signing up!' },\n\t\t{ headers },\n\t)\n}\n\nexport const meta: Route.MetaFunction = () => {\n\treturn [{ title: 'Setup Epic Notes Account' }]\n}\n\nexport default function OnboardingRoute({\n\tloaderData,\n\tactionData,\n}: Route.ComponentProps) {\n\tconst isPending = useIsPending()\n\tconst [searchParams] = useSearchParams()\n\tconst redirectTo = searchParams.get('redirectTo')\n\n\tconst [form, fields] = useForm({\n\t\tid: 'onboarding-form',\n\t\tconstraint: getZodConstraint(SignupFormSchema),\n\t\tdefaultValue: { redirectTo },\n\t\tlastResult: actionData?.result,\n\t\tonValidate({ formData }) {\n\t\t\treturn parseWithZod(formData, { schema: SignupFormSchema })\n\t\t},\n\t\tshouldRevalidate: 'onBlur',\n\t})\n\n\treturn (\n\t\t<div className=\"container flex min-h-full flex-col justify-center pt-20 pb-32\">\n\t\t\t<div className=\"mx-auto w-full max-w-lg\">\n\t\t\t\t<div className=\"flex flex-col gap-3 text-center\">\n\t\t\t\t\t<h1 className=\"text-h1\">Welcome aboard {loaderData.email}!</h1>\n\t\t\t\t\t<p className=\"text-body-md text-muted-foreground\">\n\t\t\t\t\t\tPlease enter your details.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<Spacer size=\"xs\" />\n\t\t\t\t<Form\n\t\t\t\t\tmethod=\"POST\"\n\t\t\t\t\tclassName=\"mx-auto max-w-sm min-w-full sm:min-w-[368px]\"\n\t\t\t\t\t{...getFormProps(form)}\n\t\t\t\t>\n\t\t\t\t\t<HoneypotInputs />\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ htmlFor: fields.username.id, children: 'Username' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.username, { type: 'text' }),\n\t\t\t\t\t\t\tautoComplete: 'username',\n\t\t\t\t\t\t\tclassName: 'lowercase',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.username.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ htmlFor: fields.name.id, children: 'Name' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.name, { type: 'text' }),\n\t\t\t\t\t\t\tautoComplete: 'name',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.name.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{ htmlFor: fields.password.id, children: 'Password' }}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.password, { type: 'password' }),\n\t\t\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.password.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Field\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.confirmPassword.id,\n\t\t\t\t\t\t\tchildren: 'Confirm Password',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\t...getInputProps(fields.confirmPassword, { type: 'password' }),\n\t\t\t\t\t\t\tautoComplete: 'new-password',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\terrors={fields.confirmPassword.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<CheckboxField\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.agreeToTermsOfServiceAndPrivacyPolicy.id,\n\t\t\t\t\t\t\tchildren:\n\t\t\t\t\t\t\t\t'Do you agree to our Terms of Service and Privacy Policy?',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tbuttonProps={getInputProps(\n\t\t\t\t\t\t\tfields.agreeToTermsOfServiceAndPrivacyPolicy,\n\t\t\t\t\t\t\t{ type: 'checkbox' },\n\t\t\t\t\t\t)}\n\t\t\t\t\t\terrors={fields.agreeToTermsOfServiceAndPrivacyPolicy.errors}\n\t\t\t\t\t/>\n\t\t\t\t\t<CheckboxField\n\t\t\t\t\t\tlabelProps={{\n\t\t\t\t\t\t\thtmlFor: fields.remember.id,\n\t\t\t\t\t\t\tchildren: 'Remember me',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tbuttonProps={getInputProps(fields.remember, { type: 'checkbox' })}\n\t\t\t\t\t\terrors={fields.remember.errors}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<input {...getInputProps(fields.redirectTo, { type: 'hidden' })} />\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t<div className=\"flex items-center justify-between gap-6\">\n\t\t\t\t\t\t<StatusButton\n\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\tstatus={isPending ? 'pending' : (form.status ?? 'idle')}\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate an account\n\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"],"names":["SignupFormSchema","z","username","UsernameSchema","name","NameSchema","agreeToTermsOfServiceAndPrivacyPolicy","required_error","remember","optional","redirectTo","and","PasswordAndConfirmPasswordSchema","meta","title","onboarding","_UNSAFE_withComponentProps","loaderData","actionData","isPending","useIsPending","searchParams","useSearchParams","get","form","fields","useForm","id","constraint","getZodConstraint","defaultValue","lastResult","result","onValidate","formData","parseWithZod","schema","shouldRevalidate","className","children","jsxs","email","jsx","Spacer","size","Form","method","getFormProps","HoneypotInputs","Field","labelProps","htmlFor","inputProps","getInputProps","type","autoComplete","errors","password","confirmPassword","CheckboxField","buttonProps","ErrorList","errorId","StatusButton","status","disabled"],"mappings":"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"}